{"ast":null,"code":"'use client';\n\n// src/use-counter.ts\nimport _slicedToArray from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { clampValue, countDecimalPlaces, toPrecision } from \"@chakra-ui/number-utils\";\nimport { useCallback, useState } from \"react\";\nfunction useCounter() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var onChange = props.onChange,\n    precisionProp = props.precision,\n    defaultValue = props.defaultValue,\n    valueProp = props.value,\n    _props$step = props.step,\n    stepProp = _props$step === void 0 ? 1 : _props$step,\n    _props$min = props.min,\n    min = _props$min === void 0 ? Number.MIN_SAFE_INTEGER : _props$min,\n    _props$max = props.max,\n    max = _props$max === void 0 ? Number.MAX_SAFE_INTEGER : _props$max,\n    _props$keepWithinRang = props.keepWithinRange,\n    keepWithinRange = _props$keepWithinRang === void 0 ? true : _props$keepWithinRang;\n  var onChangeProp = useCallbackRef(onChange);\n  var _useState = useState(function () {\n      var _a;\n      if (defaultValue == null) return \"\";\n      return (_a = cast(defaultValue, stepProp, precisionProp)) != null ? _a : \"\";\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    valueState = _useState2[0],\n    setValue = _useState2[1];\n  var isControlled = typeof valueProp !== \"undefined\";\n  var value = isControlled ? valueProp : valueState;\n  var decimalPlaces = getDecimalPlaces(parse(value), stepProp);\n  var precision = precisionProp != null ? precisionProp : decimalPlaces;\n  var update = useCallback(function (next) {\n    if (next === value) return;\n    if (!isControlled) {\n      setValue(next.toString());\n    }\n    onChangeProp == null ? void 0 : onChangeProp(next.toString(), parse(next));\n  }, [onChangeProp, isControlled, value]);\n  var clamp = useCallback(function (value2) {\n    var nextValue = value2;\n    if (keepWithinRange) {\n      nextValue = clampValue(nextValue, min, max);\n    }\n    return toPrecision(nextValue, precision);\n  }, [precision, keepWithinRange, max, min]);\n  var increment = useCallback(function () {\n    var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stepProp;\n    var next;\n    if (value === \"\") {\n      next = parse(step);\n    } else {\n      next = parse(value) + step;\n    }\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  var decrement = useCallback(function () {\n    var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stepProp;\n    var next;\n    if (value === \"\") {\n      next = parse(-step);\n    } else {\n      next = parse(value) - step;\n    }\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  var reset = useCallback(function () {\n    var _a;\n    var next;\n    if (defaultValue == null) {\n      next = \"\";\n    } else {\n      next = (_a = cast(defaultValue, stepProp, precisionProp)) != null ? _a : min;\n    }\n    update(next);\n  }, [defaultValue, precisionProp, stepProp, update, min]);\n  var castValue = useCallback(function (value2) {\n    var _a;\n    var nextValue = (_a = cast(value2, stepProp, precision)) != null ? _a : min;\n    update(nextValue);\n  }, [precision, stepProp, update, min]);\n  var valueAsNumber = parse(value);\n  var isOutOfRange = valueAsNumber > max || valueAsNumber < min;\n  var isAtMax = valueAsNumber === max;\n  var isAtMin = valueAsNumber === min;\n  return {\n    isOutOfRange: isOutOfRange,\n    isAtMax: isAtMax,\n    isAtMin: isAtMin,\n    precision: precision,\n    value: value,\n    valueAsNumber: valueAsNumber,\n    update: update,\n    reset: reset,\n    increment: increment,\n    decrement: decrement,\n    clamp: clamp,\n    cast: castValue,\n    setValue: setValue\n  };\n}\nfunction parse(value) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"));\n}\nfunction getDecimalPlaces(value, step) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value));\n}\nfunction cast(value, step, precision) {\n  var parsedValue = parse(value);\n  if (Number.isNaN(parsedValue)) return void 0;\n  var decimalPlaces = getDecimalPlaces(parsedValue, step);\n  return toPrecision(parsedValue, precision != null ? precision : decimalPlaces);\n}\nexport { useCounter };","map":{"version":3,"mappings":"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","names":["useCallbackRef","clampValue","countDecimalPlaces","toPrecision","useCallback","useState","useCounter","props","onChange","precisionProp","precision","defaultValue","valueProp","value","step","stepProp","min","Number","MIN_SAFE_INTEGER","max","MAX_SAFE_INTEGER","keepWithinRange","onChangeProp","_a","valueState","setValue","isControlled","decimalPlaces","getDecimalPlaces","parse","update","next","toString","clamp","nextValue","increment","decrement","reset","castValue","valueAsNumber","isOutOfRange","isAtMax","isAtMin","cast","parseFloat","replace","Math","parsedValue","isNaN"],"sources":["D:\\portfolio\\node_modules\\@chakra-ui\\counter\\src\\use-counter.ts"],"sourcesContent":["import { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport {\n  clampValue,\n  countDecimalPlaces,\n  toPrecision,\n} from \"@chakra-ui/number-utils\"\nimport { useCallback, useState } from \"react\"\n\nexport interface UseCounterProps {\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?(valueAsString: string, valueAsNumber: number): void\n  /**\n   * The number of decimal points used to round the value\n   */\n  precision?: number\n  /**\n   * The initial value of the counter. Should be less than `max` and greater than `min`\n   */\n  defaultValue?: string | number\n  /**\n   * The value of the counter. Should be less than `max` and greater than `min`\n   */\n  value?: string | number\n  /**\n   * The step used to increment or decrement the value\n   * @default 1\n   */\n  step?: number\n  /**\n   * The minimum value of the counter\n   * @default Number.MIN_SAFE_INTEGER\n   */\n  min?: number\n  /**\n   * The maximum value of the counter\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  max?: number\n  /**\n   * This controls the value update behavior in general.\n   *\n   * - If `true` and you use the stepper or up/down arrow keys,\n   *  the value will not exceed the `max` or go lower than `min`\n   *\n   * - If `false`, the value will be allowed to go out of range.\n   *\n   * @default true\n   */\n  keepWithinRange?: boolean\n}\n\nexport function useCounter(props: UseCounterProps = {}) {\n  const {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    keepWithinRange = true,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n\n  const [valueState, setValue] = useState<string | number>(() => {\n    if (defaultValue == null) return \"\"\n    return cast(defaultValue, stepProp, precisionProp) ?? \"\"\n  })\n\n  /**\n   * Because the component that consumes this hook can be controlled or uncontrolled\n   * we'll keep track of that\n   */\n  const isControlled = typeof valueProp !== \"undefined\"\n  const value = isControlled ? valueProp : valueState\n\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp)\n\n  const precision = precisionProp ?? decimalPlaces\n\n  const update = useCallback(\n    (next: string | number) => {\n      if (next === value) return\n      if (!isControlled) {\n        setValue(next.toString())\n      }\n      onChangeProp?.(next.toString(), parse(next))\n    },\n    [onChangeProp, isControlled, value],\n  )\n\n  // Function to clamp the value and round it to the precision\n  const clamp = useCallback(\n    (value: number) => {\n      let nextValue = value\n\n      if (keepWithinRange) {\n        nextValue = clampValue(nextValue, min, max)\n      }\n\n      return toPrecision(nextValue, precision)\n    },\n    [precision, keepWithinRange, max, min],\n  )\n\n  const increment = useCallback(\n    (step = stepProp) => {\n      let next: string | number\n\n      /**\n       * Let's follow the native browser behavior for\n       * scenarios where the input starts empty (\"\")\n       */\n      if (value === \"\") {\n        /**\n         * If `min` is set, native input, starts at the `min`.\n         * Else, it starts at `step`\n         */\n        next = parse(step)\n      } else {\n        next = parse(value) + step\n      }\n\n      next = clamp(next as number)\n      update(next)\n    },\n    [clamp, stepProp, update, value],\n  )\n\n  const decrement = useCallback(\n    (step = stepProp) => {\n      let next: string | number\n\n      // Same thing here. We'll follow native implementation\n      if (value === \"\") {\n        next = parse(-step)\n      } else {\n        next = parse(value) - step\n      }\n\n      next = clamp(next as number)\n      update(next)\n    },\n    [clamp, stepProp, update, value],\n  )\n\n  const reset = useCallback(() => {\n    let next: string | number\n    if (defaultValue == null) {\n      next = \"\"\n    } else {\n      next = cast(defaultValue, stepProp, precisionProp) ?? min\n    }\n    update(next)\n  }, [defaultValue, precisionProp, stepProp, update, min])\n\n  const castValue = useCallback(\n    (value: string | number) => {\n      const nextValue = cast(value, stepProp, precision) ?? min\n      update(nextValue)\n    },\n    [precision, stepProp, update, min],\n  )\n\n  const valueAsNumber = parse(value)\n\n  /**\n   * Common range checks\n   */\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min\n  const isAtMax = valueAsNumber === max\n  const isAtMin = valueAsNumber === min\n\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n    setValue,\n  }\n}\n\nexport type UseCounterReturn = ReturnType<typeof useCounter>\n\nfunction parse(value: string | number) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"))\n}\n\nfunction getDecimalPlaces(value: number, step: number) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value))\n}\n\nfunction cast(value: string | number, step: number, precision?: number) {\n  const parsedValue = parse(value)\n  if (Number.isNaN(parsedValue)) return undefined\n  const decimalPlaces = getDecimalPlaces(parsedValue, step)\n  return toPrecision(parsedValue, precision ?? decimalPlaces)\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}