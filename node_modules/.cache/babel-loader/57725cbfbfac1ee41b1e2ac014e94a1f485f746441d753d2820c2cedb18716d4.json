{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { __publicField } from \"./chunk-L3JOHIPP.mjs\";\n\n// src/modal-manager.ts\nimport { useEffect, useState } from \"react\";\nvar ModalManager = /*#__PURE__*/function () {\n  function ModalManager() {\n    _classCallCheck(this, ModalManager);\n    __publicField(this, \"modals\");\n    this.modals = /* @__PURE__ */new Map();\n  }\n  _createClass(ModalManager, [{\n    key: \"add\",\n    value: function add(modal) {\n      this.modals.set(modal, this.modals.size + 1);\n      return this.modals.size;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(modal) {\n      this.modals.delete(modal);\n    }\n  }, {\n    key: \"isTopModal\",\n    value: function isTopModal(modal) {\n      if (!modal) return false;\n      return this.modals.get(modal) === this.modals.size;\n    }\n  }]);\n  return ModalManager;\n}();\nvar modalManager = new ModalManager();\nfunction useModalManager(ref, isOpen) {\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    index = _useState2[0],\n    setIndex = _useState2[1];\n  useEffect(function () {\n    var node = ref.current;\n    if (!node) return;\n    if (isOpen) {\n      var index2 = modalManager.add(node);\n      setIndex(index2);\n    }\n    return function () {\n      modalManager.remove(node);\n      setIndex(0);\n    };\n  }, [isOpen, ref]);\n  return index;\n}\nexport { modalManager, useModalManager };","map":{"version":3,"mappings":";;;;;;;;AAAA,SAAoBA,WAAWC,gBAAgB;AAM/C,IAAMC;EAEJ,wBAAc;IAAA;IADdC;IAEE,KAAKC,SAAS,mBAAIC,KAAI;EACxB;EAAA;IAAA;IAAA,OAEA,aAAIC,OAAoB;MACtB,KAAKF,OAAOG,IAAID,OAAO,KAAKF,OAAOI,OAAO,CAAC;MAC3C,OAAO,KAAKJ,OAAOI;IACrB;EAAA;IAAA;IAAA,OAEA,gBAAOF,OAAoB;MACzB,KAAKF,OAAOK,OAAOH,KAAK;IAC1B;EAAA;IAAA;IAAA,OAEA,oBAAWA,OAA2B;MACpC,IAAI,CAACA,OAAO,OAAO;MACnB,OAAO,KAAKF,OAAOM,IAAIJ,KAAK,MAAM,KAAKF,OAAOI;IAChD;EAAA;EAAA;AAAA,GACF;AAEO,IAAMG,eAAe,IAAIT,cAAa;AAEtC,SAASU,gBAAgBC,KAA6BC,QAAkB;EAC7E,gBAA0Bb,SAAS,CAAC;IAAA;IAA7Bc;IAAOC,QAAQ;EAEtBhB,UAAU,YAAM;IACd,IAAMiB,OAAOJ,IAAIK;IAEjB,IAAI,CAACD,MAAM;IAEX,IAAIH,QAAQ;MACV,IAAMC,SAAQJ,aAAaQ,IAAIF,IAAI;MACnCD,SAASD,MAAK;IAChB;IAEA,OAAO,YAAM;MACXJ,aAAaS,OAAOH,IAAI;MACxBD,SAAS,CAAC;IACZ;EACF,GAAG,CAACF,QAAQD,GAAG,CAAC;EAEhB,OAAOE;AACT","names":["useEffect","useState","ModalManager","__publicField","modals","Map","modal","set","size","delete","get","modalManager","useModalManager","ref","isOpen","index","setIndex","node","current","add","remove"],"sources":["D:\\portfolio\\node_modules\\@chakra-ui\\modal\\src\\modal-manager.ts"],"sourcesContent":["import { RefObject, useEffect, useState } from \"react\"\n\n/**\n * Proper state management for nested modals.\n * Simplified, but inspired by material-ui's ModalManager class.\n */\nclass ModalManager {\n  modals: Map<HTMLElement, number>\n  constructor() {\n    this.modals = new Map()\n  }\n\n  add(modal: HTMLElement) {\n    this.modals.set(modal, this.modals.size + 1)\n    return this.modals.size\n  }\n\n  remove(modal: HTMLElement) {\n    this.modals.delete(modal)\n  }\n\n  isTopModal(modal: HTMLElement | null) {\n    if (!modal) return false\n    return this.modals.get(modal) === this.modals.size\n  }\n}\n\nexport const modalManager = new ModalManager()\n\nexport function useModalManager(ref: RefObject<HTMLElement>, isOpen?: boolean) {\n  const [index, setIndex] = useState(0)\n\n  useEffect(() => {\n    const node = ref.current\n\n    if (!node) return\n\n    if (isOpen) {\n      const index = modalManager.add(node)\n      setIndex(index)\n    }\n\n    return () => {\n      modalManager.remove(node)\n      setIndex(0)\n    }\n  }, [isOpen, ref])\n\n  return index\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}