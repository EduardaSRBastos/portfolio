{"ast":null,"code":"'use client';\n\n// src/switch.tsx\nimport _objectSpread from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"spacing\", \"children\"];\nimport { useCheckbox } from \"@chakra-ui/checkbox\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Switch = forwardRef(function Switch2(props, ref) {\n  var styles = useMultiStyleConfig(\"Switch\", props);\n  var _omitThemingProps = omitThemingProps(props),\n    _omitThemingProps$spa = _omitThemingProps.spacing,\n    spacing = _omitThemingProps$spa === void 0 ? \"0.5rem\" : _omitThemingProps$spa,\n    children = _omitThemingProps.children,\n    ownProps = _objectWithoutProperties(_omitThemingProps, _excluded);\n  var _useCheckbox = useCheckbox(ownProps),\n    getIndicatorProps = _useCheckbox.getIndicatorProps,\n    getInputProps = _useCheckbox.getInputProps,\n    getCheckboxProps = _useCheckbox.getCheckboxProps,\n    getRootProps = _useCheckbox.getRootProps,\n    getLabelProps = _useCheckbox.getLabelProps;\n  var containerStyles = useMemo(function () {\n    return _objectSpread({\n      display: \"inline-block\",\n      position: \"relative\",\n      verticalAlign: \"middle\",\n      lineHeight: 0\n    }, styles.container);\n  }, [styles.container]);\n  var trackStyles = useMemo(function () {\n    return _objectSpread({\n      display: \"inline-flex\",\n      flexShrink: 0,\n      justifyContent: \"flex-start\",\n      boxSizing: \"content-box\",\n      cursor: \"pointer\"\n    }, styles.track);\n  }, [styles.track]);\n  var labelStyles = useMemo(function () {\n    return _objectSpread({\n      userSelect: \"none\",\n      marginStart: spacing\n    }, styles.label);\n  }, [spacing, styles.label]);\n  return /* @__PURE__ */jsxs(chakra.label, _objectSpread(_objectSpread({}, getRootProps()), {}, {\n    className: cx(\"chakra-switch\", props.className),\n    __css: containerStyles,\n    children: [/* @__PURE__ */jsx(\"input\", _objectSpread({\n      className: \"chakra-switch__input\"\n    }, getInputProps({}, ref))), /* @__PURE__ */jsx(chakra.span, _objectSpread(_objectSpread({}, getCheckboxProps()), {}, {\n      className: \"chakra-switch__track\",\n      __css: trackStyles,\n      children: /* @__PURE__ */jsx(chakra.span, _objectSpread({\n        __css: styles.thumb,\n        className: \"chakra-switch__thumb\"\n      }, getIndicatorProps()))\n    })), children && /* @__PURE__ */jsx(chakra.span, _objectSpread(_objectSpread({\n      className: \"chakra-switch__label\"\n    }, getLabelProps()), {}, {\n      __css: labelStyles,\n      children: children\n    }))]\n  }));\n});\nSwitch.displayName = \"Switch\";\nexport { Switch };","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,mBAAqC;AAC9C,SAASC,UAAU;AACnB,SACEC,QACAC,YAEAC,kBAIAC,2BACK;AACP,SAASC,eAAe;AAqEpB,SAKEC,KALFC;AAjDG,IAAMC,SAASN,WAAiC,SAASM,QAC9DC,OACAC,KACA;EACA,IAAMC,SAASP,oBAAoB,UAAUK,KAAK;EAElD,wBAAsDN,iBAAiBM,KAAK;IAAA,0CAApEG;IAAAA,6CAAU;IAAUC;IAAaC;EAEzC,mBAMIf,YAAYe,QAAQ;IALtBC;IACAC;IACAC;IACAC;IACAC;EAGF,IAAMC,kBAAqCf,QACzC;IAAA;MACEgB,SAAS;MACTC,UAAU;MACVC,eAAe;MACfC,YAAY;IAAA,GACTb,OAAOc;EAAA,CACZ,EACA,CAACd,OAAOc,SAAS,EACnB;EAEA,IAAMC,cAAiCrB,QACrC;IAAA;MACEgB,SAAS;MACTM,YAAY;MACZC,gBAAgB;MAChBC,WAAW;MACXC,QAAQ;IAAA,GACLnB,OAAOoB;EAAA,CACZ,EACA,CAACpB,OAAOoB,KAAK,EACf;EAEA,IAAMC,cAAiC3B,QACrC;IAAA;MACE4B,YAAY;MACZC,aAAatB;IAAA,GACVD,OAAOwB;EAAA,CACZ,EACA,CAACvB,SAASD,OAAOwB,KAAK,EACxB;EAEA,OACE,oBAAClC,OAAOkC,uCACFjB,cAAa;IACjBkB,WAAWpC,GAAG,iBAAiBS,MAAM2B,SAAS;IAC9CC,OAAOjB;IAEPP,8BAAC;MAAMuB,WAAU;IAAA,GAA2BpB,cAAc,CAAC,GAAGN,GAAG,GAAG,EACpE,mBAACT,OAAOqC,sCACFrB,kBAAiB;MACrBmB,WAAU;MACVC,OAAOX;MAEPb,6BAACZ,OAAOqC;QACND,OAAO1B,OAAO4B;QACdH,WAAU;MAAA,GACNrB,mBAAkB;IACxB,GACF,EACCF,YACC,mBAACZ,OAAOqC;MACNF,WAAU;IAAA,GACNjB,eAAc;MAClBkB,OAAOL;MAENnB;IAAA,GACH;EAAA,GAEJ;AAEJ,CAAC;AAEDL,OAAOgC,cAAc","names":["useCheckbox","cx","chakra","forwardRef","omitThemingProps","useMultiStyleConfig","useMemo","jsx","jsxs","Switch","props","ref","styles","spacing","children","ownProps","getIndicatorProps","getInputProps","getCheckboxProps","getRootProps","getLabelProps","containerStyles","display","position","verticalAlign","lineHeight","container","trackStyles","flexShrink","justifyContent","boxSizing","cursor","track","labelStyles","userSelect","marginStart","label","className","__css","span","thumb","displayName"],"sources":["D:\\portfolio\\node_modules\\@chakra-ui\\switch\\src\\switch.tsx"],"sourcesContent":["import { useCheckbox, UseCheckboxProps } from \"@chakra-ui/checkbox\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { useMemo } from \"react\"\n\nexport interface SwitchProps\n  extends Omit<UseCheckboxProps, \"isIndeterminate\">,\n    Omit<HTMLChakraProps<\"label\">, keyof UseCheckboxProps>,\n    ThemingProps<\"Switch\"> {\n  /**\n   * The spacing between the switch and its label text\n   * @default 0.5rem\n   * @type SystemProps[\"marginLeft\"]\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n}\n\n/**\n * The `Switch` component is used as an alternative for the checkbox component for switching between \"enabled\" and \"disabled\" states.\n *\n * @see Docs https://chakra-ui.com/docs/components/switch\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/switch/\n */\nexport const Switch = forwardRef<SwitchProps, \"input\">(function Switch(\n  props,\n  ref,\n) {\n  const styles = useMultiStyleConfig(\"Switch\", props)\n\n  const { spacing = \"0.5rem\", children, ...ownProps } = omitThemingProps(props)\n\n  const {\n    getIndicatorProps,\n    getInputProps,\n    getCheckboxProps,\n    getRootProps,\n    getLabelProps,\n  } = useCheckbox(ownProps)\n\n  const containerStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"inline-block\",\n      position: \"relative\",\n      verticalAlign: \"middle\",\n      lineHeight: 0,\n      ...styles.container,\n    }),\n    [styles.container],\n  )\n\n  const trackStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"inline-flex\",\n      flexShrink: 0,\n      justifyContent: \"flex-start\",\n      boxSizing: \"content-box\",\n      cursor: \"pointer\",\n      ...styles.track,\n    }),\n    [styles.track],\n  )\n\n  const labelStyles: SystemStyleObject = useMemo(\n    () => ({\n      userSelect: \"none\",\n      marginStart: spacing,\n      ...styles.label,\n    }),\n    [spacing, styles.label],\n  )\n\n  return (\n    <chakra.label\n      {...getRootProps()}\n      className={cx(\"chakra-switch\", props.className)}\n      __css={containerStyles}\n    >\n      <input className=\"chakra-switch__input\" {...getInputProps({}, ref)} />\n      <chakra.span\n        {...getCheckboxProps()}\n        className=\"chakra-switch__track\"\n        __css={trackStyles}\n      >\n        <chakra.span\n          __css={styles.thumb}\n          className=\"chakra-switch__thumb\"\n          {...getIndicatorProps()}\n        />\n      </chakra.span>\n      {children && (\n        <chakra.span\n          className=\"chakra-switch__label\"\n          {...getLabelProps()}\n          __css={labelStyles}\n        >\n          {children}\n        </chakra.span>\n      )}\n    </chakra.label>\n  )\n})\n\nSwitch.displayName = \"Switch\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}