{"ast":null,"code":"var _jsxFileName = \"D:\\\\portfolio\\\\src\\\\components\\\\HomeSpeechBalloon\\\\JavaScript\\\\app.tsx\",\n  _s = $RefreshSig$();\nimport * as THREE from 'three';\nimport { useEffect, useRef } from \"react\";\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader.js';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry.js';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function SpeechBalloon() {\n  _s();\n  const canvasRef = useRef(null);\n  const isMobile = window.matchMedia('(max-width: 767px)').matches;\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const renderer = new THREE.WebGLRenderer({\n      canvas,\n      alpha: true,\n      antialias: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth - 10, window.innerHeight);\n    renderer.setClearColor(0x000000, 0);\n    if (!isMobile) {\n      var targetAspectRatio = 16 / 9;\n    } else {\n      var targetAspectRatio = 1 / 1;\n    }\n    function aspectSize(availableWidth, availableHeight) {\n      var currentRatio = availableWidth / availableHeight;\n      if (currentRatio > targetAspectRatio) {\n        //the height is the limiting factor\n        return {\n          width: availableHeight * targetAspectRatio,\n          height: availableHeight\n        };\n      } else {\n        // the width is the limiting factor\n        return {\n          width: availableWidth,\n          height: availableWidth / targetAspectRatio\n        };\n      }\n    }\n    function onWindowResize() {\n      var newDimensions = aspectSize(window.innerWidth, window.innerHeight);\n      camera.aspect = targetAspectRatio;\n      camera.updateProjectionMatrix();\n      renderer.setSize(newDimensions.width, newDimensions.height);\n      renderer.domElement.style.marginLeft = (newDimensions.width >= window.innerWidth ? 0 : (window.innerWidth - newDimensions.width) / 2) + \"px\";\n    }\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, 1, 1000);\n    if (!isMobile) {\n      camera.fov = 80;\n    } else {\n      camera.fov = 83;\n    }\n    camera.position.z = 6;\n    camera.updateProjectionMatrix();\n\n    //cube with length, height and depth\n    var cubeGeometry = new THREE.BoxGeometry(8.6, 4.5, 1);\n\n    //white color material\n    var material = new THREE.MeshBasicMaterial({\n      color: 0xffffff\n    });\n\n    //cube mesh\n    var cube = new THREE.Mesh(cubeGeometry, material);\n    cube.position.set(0, 1, 0);\n    scene.add(cube);\n    const triangleGeometry = new THREE.BufferGeometry();\n    const vertices = new Float32Array([0.5, 0.9, 0.5, -1.0, -1.0, 0.5, 0.2, -1.0, 0.5]);\n    triangleGeometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\n    const triangle = new THREE.Mesh(triangleGeometry, material);\n    triangle.position.set(-2.95, -3.0, 0.0);\n    triangle.rotation.z = Math.PI;\n    cube.add(triangle);\n    var cubeOutlineGeometry = new THREE.BoxGeometry(9, 4.9, 0.99);\n    var cubeOutlineMaterial = new THREE.MeshBasicMaterial({\n      color: 0x00\n    });\n    var cubeOutlineMesh = new THREE.Mesh(cubeOutlineGeometry, cubeOutlineMaterial);\n    cube.add(cubeOutlineMesh);\n    const triangleOutlineGeometry = new THREE.BufferGeometry();\n    const verticesOutline = new Float32Array([0.5, 0.9, 0.1, -1.0, -1.0, 0.1, 0.2, -1.0, 0.1]);\n    triangleOutlineGeometry.setAttribute('position', new THREE.BufferAttribute(verticesOutline, 3));\n    const triangleOutline = new THREE.Mesh(triangleOutlineGeometry, cubeOutlineMaterial);\n    triangleOutline.position.set(-2.95, -3.0, 0.0);\n    triangleOutline.rotation.z = Math.PI;\n    triangleOutline.scale.set(2.2, 2.2, 2.2);\n    cube.add(triangleOutline);\n\n    // Load a font for the text\n    const fontLoader = new FontLoader();\n    fontLoader.load('https://eduardasrbastos.github.io/portfolio/Pacifico_Regular.json', function (font) {\n      const textGeometry = new TextGeometry('Eduarda', {\n        font: font,\n        size: 0.8,\n        height: 0\n      });\n      const textMaterial = new THREE.MeshBasicMaterial({\n        color: 0xFFC524\n      });\n      // create a mesh for the text and position it relative to the cube\n      const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n      textMesh.position.set(-2, 0, 0.54);\n      cube.add(textMesh);\n      const textGeometry2 = new TextGeometry('Software and Web Developer', {\n        font: font,\n        size: 0.4,\n        height: 0\n      });\n      const textMaterial2 = new THREE.MeshBasicMaterial({\n        color: 0x00\n      });\n\n      // create a mesh for the text and position it relative to the cube\n      const textMesh2 = new THREE.Mesh(textGeometry2, textMaterial2);\n      textMesh2.position.set(-3.5, -0.8, 0.54);\n      cube.add(textMesh2);\n    });\n\n    //cube rotation\n    var cubeCoordRotation;\n    canvas.addEventListener('mouseenter', () => {\n      canvas.addEventListener('mousemove', onMouseMove);\n    });\n    canvas.addEventListener('mouseleave', () => {\n      cubeCoordRotation = {\n        x: 0,\n        y: 0\n      };\n      canvas.removeEventListener('mousemove', onMouseMove);\n    });\n    function onMouseMove(ev) {\n      // calculate the mouse position relative to the scene\n      const rect = ev.currentTarget.getBoundingClientRect();\n      var x = (ev.clientX - rect.left) / rect.width * 2 - 1;\n      var y = (ev.clientY - rect.top) / rect.height * 2 - 1;\n\n      //rotation to apply to cubeCoordRotation\n      cubeCoordRotation = {\n        x: x,\n        y: y\n      };\n    }\n    const MAX_ROTATION_ANGLE = Math.PI / 6; // 90 degrees in radians\n    const MIN_ROTATION_ANGLE = -Math.PI / 6;\n\n    //function to create animations\n    function update() {\n      //changes rotation of the cube on the axis with the position of the mouse\n      if (cubeCoordRotation != null) {\n        cube.rotation.x += cubeCoordRotation.y * 0.003;\n        cube.rotation.y += cubeCoordRotation.x * 0.003;\n        cube.rotation.x = Math.max(MIN_ROTATION_ANGLE, Math.min(MAX_ROTATION_ANGLE, cube.rotation.x));\n        cube.rotation.y = Math.max(MIN_ROTATION_ANGLE, Math.min(MAX_ROTATION_ANGLE, cube.rotation.y));\n      }\n\n      //render scene\n      renderer.render(scene, camera);\n      requestAnimationFrame(update);\n    }\n    update();\n    window.addEventListener('resize', onWindowResize, false);\n    onWindowResize(); // call onWindowResize initially to set canvas size\n\n    return () => {\n      window.removeEventListener('resize', onWindowResize);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 8\n  }, this);\n}\n_s(SpeechBalloon, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = SpeechBalloon;\nvar _c;\n$RefreshReg$(_c, \"SpeechBalloon\");","map":{"version":3,"names":["THREE","useEffect","useRef","FontLoader","TextGeometry","React","jsxDEV","_jsxDEV","SpeechBalloon","_s","canvasRef","isMobile","window","matchMedia","matches","canvas","current","renderer","WebGLRenderer","alpha","antialias","setPixelRatio","devicePixelRatio","setSize","innerWidth","innerHeight","setClearColor","targetAspectRatio","aspectSize","availableWidth","availableHeight","currentRatio","width","height","onWindowResize","newDimensions","camera","aspect","updateProjectionMatrix","domElement","style","marginLeft","scene","Scene","PerspectiveCamera","fov","position","z","cubeGeometry","BoxGeometry","material","MeshBasicMaterial","color","cube","Mesh","set","add","triangleGeometry","BufferGeometry","vertices","Float32Array","setAttribute","BufferAttribute","triangle","rotation","Math","PI","cubeOutlineGeometry","cubeOutlineMaterial","cubeOutlineMesh","triangleOutlineGeometry","verticesOutline","triangleOutline","scale","fontLoader","load","font","textGeometry","size","textMaterial","textMesh","textGeometry2","textMaterial2","textMesh2","cubeCoordRotation","addEventListener","onMouseMove","x","y","removeEventListener","ev","rect","currentTarget","getBoundingClientRect","clientX","left","clientY","top","MAX_ROTATION_ANGLE","MIN_ROTATION_ANGLE","update","max","min","render","requestAnimationFrame","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/portfolio/src/components/HomeSpeechBalloon/JavaScript/app.tsx"],"sourcesContent":["import * as THREE from 'three';\r\nimport { useEffect, useRef } from \"react\";\r\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader.js';\r\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry.js';\r\nimport React from 'react';\r\n\r\nexport function SpeechBalloon() {\r\n\r\nconst canvasRef = useRef<HTMLCanvasElement>(null);\r\nconst isMobile = window.matchMedia('(max-width: 767px)').matches;\r\nuseEffect(()=> {\r\n    const canvas = canvasRef.current!;\r\n    const renderer = new THREE.WebGLRenderer({ canvas, alpha: true, antialias: true });\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n    renderer.setSize(window.innerWidth - 10, window.innerHeight);\r\n    renderer.setClearColor(0x000000, 0);\r\n\r\n    if (!isMobile) {\r\n        var targetAspectRatio = 16 / 9; \r\n      } else {\r\n        var targetAspectRatio = 1 / 1; \r\n      }\r\n\r\n    function aspectSize(availableWidth: number, availableHeight: number) {\r\n    var currentRatio = availableWidth / availableHeight;\r\n    if (currentRatio > targetAspectRatio) {\r\n        //the height is the limiting factor\r\n        return {\r\n        width: availableHeight * targetAspectRatio,\r\n        height: availableHeight\r\n        };\r\n    } else {\r\n        // the width is the limiting factor\r\n        return {\r\n        width: availableWidth,\r\n        height: availableWidth / targetAspectRatio\r\n        };\r\n    }\r\n    }\r\n\r\n    function onWindowResize() {\r\n    var newDimensions = aspectSize(window.innerWidth, window.innerHeight);\r\n    camera.aspect = targetAspectRatio;\r\n    camera.updateProjectionMatrix();\r\n\r\n    renderer.setSize(newDimensions.width, newDimensions.height);\r\n\r\n    renderer.domElement.style.marginLeft = (newDimensions.width >= window.innerWidth ? 0 : (window.innerWidth - newDimensions.width) / 2) + \"px\";\r\n    }\r\n    \r\n    var scene = new THREE.Scene();\r\n    var camera = new THREE.PerspectiveCamera(80, window.innerWidth/window.innerHeight, 1, 1000);\r\n\r\n    if (!isMobile) {\r\n        camera.fov = 80;\r\n      } else {\r\n        camera.fov = 83;\r\n      }\r\n\r\n    camera.position.z = 6;\r\n    \r\n    camera.updateProjectionMatrix();\r\n\r\n    //cube with length, height and depth\r\n    var cubeGeometry = new THREE.BoxGeometry(8.6,4.5,1);\r\n    \r\n    //white color material\r\n    var material = new THREE.MeshBasicMaterial({color: 0xffffff});\r\n    \r\n    //cube mesh\r\n    var cube = new THREE.Mesh(cubeGeometry, material);\r\n    cube.position.set(0,1,0);\r\n    scene.add(cube);\r\n\r\n    const triangleGeometry = new THREE.BufferGeometry();\r\n    const vertices = new Float32Array([\r\n        0.5, 0.9, 0.5,\r\n        -1.0, -1.0, 0.5,\r\n        0.2, -1.0, 0.5\r\n    ]);\r\n\r\n    triangleGeometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n    const triangle = new THREE.Mesh(triangleGeometry, material);\r\n    triangle.position.set(-2.95, -3.0, 0.0);\r\n    triangle.rotation.z = Math.PI;\r\n    cube.add(triangle);\r\n\r\n    var cubeOutlineGeometry = new THREE.BoxGeometry(9,4.9,0.99);\r\n    var cubeOutlineMaterial = new THREE.MeshBasicMaterial( { color: 0x00 } );\r\n    var cubeOutlineMesh = new THREE.Mesh( cubeOutlineGeometry, cubeOutlineMaterial );\r\n    cube.add(cubeOutlineMesh);\r\n\r\n    const triangleOutlineGeometry = new THREE.BufferGeometry();\r\n    const verticesOutline = new Float32Array([\r\n        0.5, 0.9, 0.1,\r\n        -1.0, -1.0, 0.1,\r\n        0.2, -1.0, 0.1\r\n    ]);\r\n\r\n    triangleOutlineGeometry.setAttribute('position', new THREE.BufferAttribute(verticesOutline, 3));\r\n    const triangleOutline = new THREE.Mesh(triangleOutlineGeometry, cubeOutlineMaterial);\r\n    triangleOutline.position.set(-2.95, -3.0, 0.0);\r\n    triangleOutline.rotation.z = Math.PI;\r\n    triangleOutline.scale.set(2.2, 2.2, 2.2);\r\n    cube.add(triangleOutline);\r\n\r\n    // Load a font for the text\r\n    const fontLoader = new FontLoader();\r\n    fontLoader.load( 'https://eduardasrbastos.github.io/portfolio/Pacifico_Regular.json', function ( font ) {\r\n        const textGeometry = new TextGeometry( 'Eduarda', {\r\n            font: font,\r\n            size: 0.8,\r\n            height: 0,\r\n        } );\r\n        const textMaterial = new THREE.MeshBasicMaterial({ color: 0xFFC524 });\r\n        // create a mesh for the text and position it relative to the cube\r\n        const textMesh = new THREE.Mesh(textGeometry, textMaterial);\r\n        textMesh.position.set(-2, 0, 0.54);\r\n        cube.add(textMesh);\r\n\r\n        const textGeometry2 = new TextGeometry( 'Software and Web Developer', {\r\n            font: font,\r\n            size: 0.4,\r\n            height: 0,\r\n        } );\r\n        const textMaterial2 = new THREE.MeshBasicMaterial({ color: 0x00 });\r\n      \r\n        // create a mesh for the text and position it relative to the cube\r\n        const textMesh2 = new THREE.Mesh(textGeometry2, textMaterial2);\r\n        textMesh2.position.set(-3.5, -0.8, 0.54);\r\n        cube.add(textMesh2);\r\n    } );\r\n\r\n    //cube rotation\r\n    var cubeCoordRotation: { x: any; y: any;};\r\n\r\n    canvas.addEventListener('mouseenter', () => {\r\n        canvas.addEventListener('mousemove', onMouseMove);\r\n    });\r\n    \r\n    canvas.addEventListener('mouseleave', () => {\r\n        cubeCoordRotation = {x:0, y:0}\r\n        canvas.removeEventListener('mousemove', onMouseMove);\r\n    });\r\n\r\n    function onMouseMove(ev:any) {\r\n        // calculate the mouse position relative to the scene\r\n        const rect = ev.currentTarget.getBoundingClientRect();\r\n        var x = (ev.clientX - rect.left)/(rect.width )*2 - 1;\r\n        var y = (ev.clientY - rect.top)/(rect.height)*2 - 1;\r\n            \r\n        //rotation to apply to cubeCoordRotation\r\n        cubeCoordRotation = {x:x, y:y}\r\n    }\r\n  \r\n    const MAX_ROTATION_ANGLE = Math.PI / 6; // 90 degrees in radians\r\n    const MIN_ROTATION_ANGLE = -Math.PI / 6;\r\n    \r\n    //function to create animations\r\n    function update(){\r\n        //changes rotation of the cube on the axis with the position of the mouse\r\n        if(cubeCoordRotation != null)\r\n        {\r\n            cube.rotation.x +=cubeCoordRotation.y * 0.003;\r\n            cube.rotation.y +=cubeCoordRotation.x * 0.003;\r\n\r\n            cube.rotation.x = Math.max(MIN_ROTATION_ANGLE, Math.min(MAX_ROTATION_ANGLE, cube.rotation.x));\r\n            cube.rotation.y = Math.max(MIN_ROTATION_ANGLE, Math.min(MAX_ROTATION_ANGLE, cube.rotation.y));\r\n        }\r\n    \r\n        //render scene\r\n        renderer.render(scene, camera);\r\n    \r\n        requestAnimationFrame(update);\r\n    }\r\n\r\n    update();\r\n\r\n    window.addEventListener('resize', onWindowResize, false);\r\n    onWindowResize(); // call onWindowResize initially to set canvas size\r\n  \r\n    return () => {\r\n      window.removeEventListener('resize', onWindowResize);\r\n    }\r\n}, []);\r\n\r\nreturn <canvas ref={canvasRef} />\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}