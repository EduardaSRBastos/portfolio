{"ast":null,"code":"'use client';\n\n// src/index.ts\nimport _slicedToArray from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useMemo, useState } from \"react\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nfunction useControllableProp(prop, state) {\n  var controlled = typeof prop !== \"undefined\";\n  var value = controlled ? prop : state;\n  return useMemo(function () {\n    return [controlled, value];\n  }, [controlled, value]);\n}\nfunction useControllableState(props) {\n  var valueProp = props.value,\n    defaultValue = props.defaultValue,\n    onChange = props.onChange,\n    _props$shouldUpdate = props.shouldUpdate,\n    shouldUpdate = _props$shouldUpdate === void 0 ? function (prev, next) {\n      return prev !== next;\n    } : _props$shouldUpdate;\n  var onChangeProp = useCallbackRef(onChange);\n  var shouldUpdateProp = useCallbackRef(shouldUpdate);\n  var _useState = useState(defaultValue),\n    _useState2 = _slicedToArray(_useState, 2),\n    uncontrolledState = _useState2[0],\n    setUncontrolledState = _useState2[1];\n  var controlled = valueProp !== void 0;\n  var value = controlled ? valueProp : uncontrolledState;\n  var setValue = useCallbackRef(function (next) {\n    var setter = next;\n    var nextValue = typeof next === \"function\" ? setter(value) : next;\n    if (!shouldUpdateProp(value, nextValue)) {\n      return;\n    }\n    if (!controlled) {\n      setUncontrolledState(nextValue);\n    }\n    onChangeProp(nextValue);\n  }, [controlled, onChangeProp, value, shouldUpdateProp]);\n  return [value, setValue];\n}\nexport { useControllableProp, useControllableState };","map":{"version":3,"mappings":";;;;AAAA,SAASA,SAASC,gBAAgB;AAClC,SAASC,sBAAsB;AAOxB,SAASC,oBAAuBC,MAAqBC,OAAU;EACpE,IAAMC,aAAa,OAAOF,SAAS;EACnC,IAAMG,QAAQD,aAAaF,OAAOC;EAClC,OAAOL,QAAsB;IAAA,OAAM,CAACM,YAAYC,KAAK;EAAA,GAAG,CAACD,YAAYC,KAAK,CAAC;AAC7E;AAcO,SAASC,qBAAwBC,OAAqC;EAC3E,IACSC,YAILD,MAJFF;IACAI,eAGEF,MAHFE;IACAC,WAEEH,MAFFG;IAAA,sBAEEH,MADFI;IAAAA,gDAAe,UAACC,MAAMC;MAAA,OAASD,SAASC;IAAA;EAG1C,IAAMC,eAAed,eAAeU,QAAQ;EAC5C,IAAMK,mBAAmBf,eAAeW,YAAY;EAEpD,gBAAkDZ,SAASU,YAAiB;IAAA;IAArEO;IAAmBC,oBAAoB;EAC9C,IAAMb,aAAaI,cAAc;EACjC,IAAMH,QAAQD,aAAaI,YAAYQ;EAEvC,IAAME,WAAWlB,eACf,UAACa,MAAkC;IACjC,IAAMM,SAASN;IACf,IAAMO,YAAY,OAAOP,SAAS,aAAaM,OAAOd,KAAK,IAAIQ;IAE/D,IAAI,CAACE,iBAAiBV,OAAOe,SAAS,GAAG;MACvC;IACF;IAEA,IAAI,CAAChB,YAAY;MACfa,qBAAqBG,SAAS;IAChC;IAEAN,aAAaM,SAAS;EACxB,GACA,CAAChB,YAAYU,cAAcT,OAAOU,gBAAgB,EACpD;EAEA,OAAO,CAACV,OAAOa,QAAQ;AACzB","names":["useMemo","useState","useCallbackRef","useControllableProp","prop","state","controlled","value","useControllableState","props","valueProp","defaultValue","onChange","shouldUpdate","prev","next","onChangeProp","shouldUpdateProp","uncontrolledState","setUncontrolledState","setValue","setter","nextValue"],"sources":["D:\\portfolio\\node_modules\\@chakra-ui\\react-use-controllable-state\\src\\index.ts"],"sourcesContent":["import { useMemo, useState } from \"react\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\n\n/**\n * Given a prop value and state value, the useControllableProp hook is used to determine whether a component is controlled or uncontrolled, and also returns the computed value.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-controllable#usecontrollableprop\n */\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const controlled = typeof prop !== \"undefined\"\n  const value = controlled ? prop : state\n  return useMemo<[boolean, T]>(() => [controlled, value], [controlled, value])\n}\n\nexport interface UseControllableStateProps<T> {\n  value?: T\n  defaultValue?: T | (() => T)\n  onChange?: (value: T) => void\n  shouldUpdate?: (prev: T, next: T) => boolean\n}\n\n/**\n * The `useControllableState` hook returns the state and function that updates the state, just like React.useState does.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-controllable#usecontrollablestate\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n  const shouldUpdateProp = useCallbackRef(shouldUpdate)\n\n  const [uncontrolledState, setUncontrolledState] = useState(defaultValue as T)\n  const controlled = valueProp !== undefined\n  const value = controlled ? valueProp : uncontrolledState\n\n  const setValue = useCallbackRef(\n    (next: React.SetStateAction<T>) => {\n      const setter = next as (prevState?: T) => T\n      const nextValue = typeof next === \"function\" ? setter(value) : next\n\n      if (!shouldUpdateProp(value, nextValue)) {\n        return\n      }\n\n      if (!controlled) {\n        setUncontrolledState(nextValue)\n      }\n\n      onChangeProp(nextValue)\n    },\n    [controlled, onChangeProp, value, shouldUpdateProp],\n  )\n\n  return [value, setValue] as [T, React.Dispatch<React.SetStateAction<T>>]\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}