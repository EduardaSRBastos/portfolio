{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"ref\", \"isDisabled\", \"isFocusable\", \"clickOnEnter\", \"clickOnSpace\", \"onMouseDown\", \"onMouseUp\", \"onClick\", \"onKeyDown\", \"onKeyUp\", \"tabIndex\", \"onMouseOver\", \"onMouseLeave\"];\nimport { useEventListeners } from \"./chunk-VDSXRTOE.mjs\";\n\n// src/use-clickable.ts\nimport { dataAttr } from \"@chakra-ui/shared-utils\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { useCallback, useState } from \"react\";\nfunction isValidElement(event) {\n  var element = event.target;\n  var tagName = element.tagName,\n    isContentEditable = element.isContentEditable;\n  return tagName !== \"INPUT\" && tagName !== \"TEXTAREA\" && isContentEditable !== true;\n}\nfunction useClickable() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var htmlRef = props.ref,\n    isDisabled = props.isDisabled,\n    isFocusable = props.isFocusable,\n    _props$clickOnEnter = props.clickOnEnter,\n    clickOnEnter = _props$clickOnEnter === void 0 ? true : _props$clickOnEnter,\n    _props$clickOnSpace = props.clickOnSpace,\n    clickOnSpace = _props$clickOnSpace === void 0 ? true : _props$clickOnSpace,\n    onMouseDown = props.onMouseDown,\n    onMouseUp = props.onMouseUp,\n    onClick = props.onClick,\n    onKeyDown = props.onKeyDown,\n    onKeyUp = props.onKeyUp,\n    tabIndexProp = props.tabIndex,\n    onMouseOver = props.onMouseOver,\n    onMouseLeave = props.onMouseLeave,\n    htmlProps = _objectWithoutProperties(props, _excluded);\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    isButton = _useState2[0],\n    setIsButton = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isPressed = _useState4[0],\n    setIsPressed = _useState4[1];\n  var listeners = useEventListeners();\n  var refCallback = function refCallback(node) {\n    if (!node) return;\n    if (node.tagName !== \"BUTTON\") {\n      setIsButton(false);\n    }\n  };\n  var tabIndex = isButton ? tabIndexProp : tabIndexProp || 0;\n  var trulyDisabled = isDisabled && !isFocusable;\n  var handleClick = useCallback(function (event) {\n    if (isDisabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      return;\n    }\n    var self = event.currentTarget;\n    self.focus();\n    onClick == null ? void 0 : onClick(event);\n  }, [isDisabled, onClick]);\n  var onDocumentKeyUp = useCallback(function (e) {\n    if (isPressed && isValidElement(e)) {\n      e.preventDefault();\n      e.stopPropagation();\n      setIsPressed(false);\n      listeners.remove(document, \"keyup\", onDocumentKeyUp, false);\n    }\n  }, [isPressed, listeners]);\n  var handleKeyDown = useCallback(function (event) {\n    onKeyDown == null ? void 0 : onKeyDown(event);\n    if (isDisabled || event.defaultPrevented || event.metaKey) {\n      return;\n    }\n    if (!isValidElement(event.nativeEvent) || isButton) return;\n    var shouldClickOnEnter = clickOnEnter && event.key === \"Enter\";\n    var shouldClickOnSpace = clickOnSpace && event.key === \" \";\n    if (shouldClickOnSpace) {\n      event.preventDefault();\n      setIsPressed(true);\n    }\n    if (shouldClickOnEnter) {\n      event.preventDefault();\n      var self = event.currentTarget;\n      self.click();\n    }\n    listeners.add(document, \"keyup\", onDocumentKeyUp, false);\n  }, [isDisabled, isButton, onKeyDown, clickOnEnter, clickOnSpace, listeners, onDocumentKeyUp]);\n  var handleKeyUp = useCallback(function (event) {\n    onKeyUp == null ? void 0 : onKeyUp(event);\n    if (isDisabled || event.defaultPrevented || event.metaKey) return;\n    if (!isValidElement(event.nativeEvent) || isButton) return;\n    var shouldClickOnSpace = clickOnSpace && event.key === \" \";\n    if (shouldClickOnSpace) {\n      event.preventDefault();\n      setIsPressed(false);\n      var self = event.currentTarget;\n      self.click();\n    }\n  }, [clickOnSpace, isButton, isDisabled, onKeyUp]);\n  var onDocumentMouseUp = useCallback(function (event) {\n    if (event.button !== 0) return;\n    setIsPressed(false);\n    listeners.remove(document, \"mouseup\", onDocumentMouseUp, false);\n  }, [listeners]);\n  var handleMouseDown = useCallback(function (event) {\n    if (event.button !== 0) return;\n    if (isDisabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      return;\n    }\n    if (!isButton) {\n      setIsPressed(true);\n    }\n    var target = event.currentTarget;\n    target.focus({\n      preventScroll: true\n    });\n    listeners.add(document, \"mouseup\", onDocumentMouseUp, false);\n    onMouseDown == null ? void 0 : onMouseDown(event);\n  }, [isDisabled, isButton, onMouseDown, listeners, onDocumentMouseUp]);\n  var handleMouseUp = useCallback(function (event) {\n    if (event.button !== 0) return;\n    if (!isButton) {\n      setIsPressed(false);\n    }\n    onMouseUp == null ? void 0 : onMouseUp(event);\n  }, [onMouseUp, isButton]);\n  var handleMouseOver = useCallback(function (event) {\n    if (isDisabled) {\n      event.preventDefault();\n      return;\n    }\n    onMouseOver == null ? void 0 : onMouseOver(event);\n  }, [isDisabled, onMouseOver]);\n  var handleMouseLeave = useCallback(function (event) {\n    if (isPressed) {\n      event.preventDefault();\n      setIsPressed(false);\n    }\n    onMouseLeave == null ? void 0 : onMouseLeave(event);\n  }, [isPressed, onMouseLeave]);\n  var ref = mergeRefs(htmlRef, refCallback);\n  if (isButton) {\n    return _objectSpread(_objectSpread({}, htmlProps), {}, {\n      ref: ref,\n      type: \"button\",\n      \"aria-disabled\": trulyDisabled ? void 0 : isDisabled,\n      disabled: trulyDisabled,\n      onClick: handleClick,\n      onMouseDown: onMouseDown,\n      onMouseUp: onMouseUp,\n      onKeyUp: onKeyUp,\n      onKeyDown: onKeyDown,\n      onMouseOver: onMouseOver,\n      onMouseLeave: onMouseLeave\n    });\n  }\n  return _objectSpread(_objectSpread({}, htmlProps), {}, {\n    ref: ref,\n    role: \"button\",\n    \"data-active\": dataAttr(isPressed),\n    \"aria-disabled\": isDisabled ? \"true\" : void 0,\n    tabIndex: trulyDisabled ? void 0 : tabIndex,\n    onClick: handleClick,\n    onMouseDown: handleMouseDown,\n    onMouseUp: handleMouseUp,\n    onKeyUp: handleKeyUp,\n    onKeyDown: handleKeyDown,\n    onMouseOver: handleMouseOver,\n    onMouseLeave: handleMouseLeave\n  });\n}\nexport { useClickable };","map":{"version":3,"mappings":"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","names":["dataAttr","mergeRefs","useCallback","useState","isValidElement","event","element","target","tagName","isContentEditable","useClickable","props","htmlRef","ref","isDisabled","isFocusable","clickOnEnter","clickOnSpace","onMouseDown","onMouseUp","onClick","onKeyDown","onKeyUp","tabIndexProp","tabIndex","onMouseOver","onMouseLeave","htmlProps","isButton","setIsButton","isPressed","setIsPressed","listeners","useEventListeners","refCallback","node","trulyDisabled","handleClick","stopPropagation","preventDefault","self","currentTarget","focus","onDocumentKeyUp","e","remove","document","handleKeyDown","defaultPrevented","metaKey","nativeEvent","shouldClickOnEnter","key","shouldClickOnSpace","click","add","handleKeyUp","onDocumentMouseUp","button","handleMouseDown","preventScroll","handleMouseUp","handleMouseOver","handleMouseLeave","type","disabled","role"],"sources":["D:\\portfolio\\node_modules\\@chakra-ui\\clickable\\src\\use-clickable.ts"],"sourcesContent":["import { dataAttr } from \"@chakra-ui/shared-utils\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useEventListeners } from \"./use-event-listeners\"\nimport { useCallback, useState } from \"react\"\n\nexport interface UseClickableProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * If `true`, the element will be disabled.\n   * It will set the `disabled` HTML attribute\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and isDisabled, the element will\n   * have only `aria-disabled` set to `true`\n   *\n   * @default false\n   */\n  isFocusable?: boolean\n  /**\n   * Whether or not trigger click on pressing `Enter`.\n   *\n   * @default true\n   */\n  clickOnEnter?: boolean\n  /**\n   * Whether or not trigger click on pressing `Space`.\n   *\n   * @default true\n   */\n  clickOnSpace?: boolean\n  /**\n   * The ref for the element\n   */\n  ref?: React.Ref<HTMLElement>\n}\n\nfunction isValidElement(event: KeyboardEvent): boolean {\n  const element = event.target as HTMLElement\n  const { tagName, isContentEditable } = element\n  return (\n    tagName !== \"INPUT\" && tagName !== \"TEXTAREA\" && isContentEditable !== true\n  )\n}\n\n/**\n * useClickable implements all the interactions of a native `button`\n * component with support for making it focusable even if it is disabled.\n *\n * It can be used with both native button elements or other elements (like `div`).\n */\nexport function useClickable(props: UseClickableProps = {}) {\n  const {\n    ref: htmlRef,\n    isDisabled,\n    isFocusable,\n    clickOnEnter = true,\n    clickOnSpace = true,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onKeyDown,\n    onKeyUp,\n    tabIndex: tabIndexProp,\n    onMouseOver,\n    onMouseLeave,\n    ...htmlProps\n  } = props\n  /**\n   * We'll use this to track if the element is a button element\n   */\n  const [isButton, setIsButton] = useState(true)\n\n  /**\n   * For custom button implementation, we'll use this to track when\n   * we mouse down on the button, to enable use style its \":active\" style\n   */\n  const [isPressed, setIsPressed] = useState(false)\n\n  const listeners = useEventListeners()\n\n  /**\n   * The ref callback that fires as soon as the dom node is ready\n   */\n  const refCallback = (node: any) => {\n    if (!node) return\n    if (node.tagName !== \"BUTTON\") {\n      setIsButton(false)\n    }\n  }\n\n  const tabIndex = isButton ? tabIndexProp : tabIndexProp || 0\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isDisabled) {\n        event.stopPropagation()\n        event.preventDefault()\n        return\n      }\n\n      const self = event.currentTarget as HTMLElement\n      self.focus()\n      onClick?.(event)\n    },\n    [isDisabled, onClick],\n  )\n\n  const onDocumentKeyUp = useCallback(\n    (e: KeyboardEvent) => {\n      if (isPressed && isValidElement(e)) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        setIsPressed(false)\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        listeners.remove(document, \"keyup\", onDocumentKeyUp, false)\n      }\n    },\n    [isPressed, listeners],\n  )\n\n  const handleKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      onKeyDown?.(event)\n\n      if (isDisabled || event.defaultPrevented || event.metaKey) {\n        return\n      }\n\n      if (!isValidElement(event.nativeEvent) || isButton) return\n\n      const shouldClickOnEnter = clickOnEnter && event.key === \"Enter\"\n      const shouldClickOnSpace = clickOnSpace && event.key === \" \"\n\n      if (shouldClickOnSpace) {\n        event.preventDefault()\n        setIsPressed(true)\n      }\n\n      if (shouldClickOnEnter) {\n        event.preventDefault()\n        const self = event.currentTarget as HTMLElement\n        self.click()\n      }\n\n      listeners.add(document, \"keyup\", onDocumentKeyUp, false)\n    },\n    [\n      isDisabled,\n      isButton,\n      onKeyDown,\n      clickOnEnter,\n      clickOnSpace,\n      listeners,\n      onDocumentKeyUp,\n    ],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      onKeyUp?.(event)\n\n      if (isDisabled || event.defaultPrevented || event.metaKey) return\n\n      if (!isValidElement(event.nativeEvent) || isButton) return\n\n      const shouldClickOnSpace = clickOnSpace && event.key === \" \"\n\n      if (shouldClickOnSpace) {\n        event.preventDefault()\n        setIsPressed(false)\n\n        const self = event.currentTarget as HTMLElement\n        self.click()\n      }\n    },\n    [clickOnSpace, isButton, isDisabled, onKeyUp],\n  )\n\n  const onDocumentMouseUp = useCallback(\n    (event: MouseEvent) => {\n      if (event.button !== 0) return\n      setIsPressed(false)\n      listeners.remove(document, \"mouseup\", onDocumentMouseUp, false)\n    },\n    [listeners],\n  )\n\n  const handleMouseDown = useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (event.button !== 0) return\n\n      if (isDisabled) {\n        event.stopPropagation()\n        event.preventDefault()\n        return\n      }\n\n      if (!isButton) {\n        setIsPressed(true)\n      }\n\n      const target = event.currentTarget as HTMLElement\n      target.focus({ preventScroll: true })\n\n      listeners.add(document, \"mouseup\", onDocumentMouseUp, false)\n\n      onMouseDown?.(event)\n    },\n    [isDisabled, isButton, onMouseDown, listeners, onDocumentMouseUp],\n  )\n\n  const handleMouseUp = useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (event.button !== 0) return\n\n      if (!isButton) {\n        setIsPressed(false)\n      }\n\n      onMouseUp?.(event)\n    },\n    [onMouseUp, isButton],\n  )\n\n  const handleMouseOver = useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      onMouseOver?.(event)\n    },\n    [isDisabled, onMouseOver],\n  )\n\n  const handleMouseLeave = useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isPressed) {\n        event.preventDefault()\n        setIsPressed(false)\n      }\n      onMouseLeave?.(event)\n    },\n    [isPressed, onMouseLeave],\n  )\n\n  const ref = mergeRefs(htmlRef, refCallback)\n\n  if (isButton) {\n    return {\n      ...htmlProps,\n      ref,\n      type: \"button\" as React.ButtonHTMLAttributes<any>[\"type\"],\n      \"aria-disabled\": trulyDisabled ? undefined : isDisabled,\n      disabled: trulyDisabled,\n      onClick: handleClick,\n      onMouseDown,\n      onMouseUp,\n      onKeyUp,\n      onKeyDown,\n      onMouseOver,\n      onMouseLeave,\n    }\n  }\n\n  return {\n    ...htmlProps,\n    ref,\n    role: \"button\",\n    \"data-active\": dataAttr(isPressed),\n    \"aria-disabled\": isDisabled ? (\"true\" as const) : undefined,\n    tabIndex: trulyDisabled ? undefined : tabIndex,\n    onClick: handleClick,\n    onMouseDown: handleMouseDown,\n    onMouseUp: handleMouseUp,\n    onKeyUp: handleKeyUp,\n    onKeyDown: handleKeyDown,\n    onMouseOver: handleMouseOver,\n    onMouseLeave: handleMouseLeave,\n  }\n}\n\nexport type UseClickableReturn = ReturnType<typeof useClickable>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}