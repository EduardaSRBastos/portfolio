{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { ColorModeContext } from \"./chunk-UQDW7KKV.mjs\";\nimport { getColorModeUtils } from \"./chunk-X7ZBZ4KW.mjs\";\nimport { localStorageManager } from \"./chunk-44OWBZ77.mjs\";\n\n// src/color-mode-provider.tsx\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar noop = function noop() {};\nfunction getTheme(manager, fallback) {\n  return manager.type === \"cookie\" && manager.ssr ? manager.get(fallback) : fallback;\n}\nfunction ColorModeProvider(props) {\n  var value = props.value,\n    children = props.children,\n    _props$options = props.options,\n    _props$options2 = _props$options === void 0 ? {} : _props$options,\n    useSystemColorMode = _props$options2.useSystemColorMode,\n    initialColorMode = _props$options2.initialColorMode,\n    disableTransitionOnChange = _props$options2.disableTransitionOnChange,\n    _props$colorModeManag = props.colorModeManager,\n    colorModeManager = _props$colorModeManag === void 0 ? localStorageManager : _props$colorModeManag;\n  var defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  var _useState = useState(function () {\n      return getTheme(colorModeManager, defaultColorMode);\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    colorMode = _useState2[0],\n    rawSetColorMode = _useState2[1];\n  var _useState3 = useState(function () {\n      return getTheme(colorModeManager);\n    }),\n    _useState4 = _slicedToArray(_useState3, 2),\n    resolvedColorMode = _useState4[0],\n    setResolvedColorMode = _useState4[1];\n  var _useMemo = useMemo(function () {\n      return getColorModeUtils({\n        preventTransition: disableTransitionOnChange\n      });\n    }, [disableTransitionOnChange]),\n    getSystemTheme = _useMemo.getSystemTheme,\n    setClassName = _useMemo.setClassName,\n    setDataset = _useMemo.setDataset,\n    addListener = _useMemo.addListener;\n  var resolvedValue = initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode;\n  var setColorMode = useCallback(function (value2) {\n    var resolved = value2 === \"system\" ? getSystemTheme() : value2;\n    rawSetColorMode(resolved);\n    setClassName(resolved === \"dark\");\n    setDataset(resolved);\n    colorModeManager.set(resolved);\n  }, [colorModeManager, getSystemTheme, setClassName, setDataset]);\n  useSafeLayoutEffect(function () {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme());\n    }\n  }, []);\n  useEffect(function () {\n    var managerValue = colorModeManager.get();\n    if (managerValue) {\n      setColorMode(managerValue);\n      return;\n    }\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\");\n      return;\n    }\n    setColorMode(defaultColorMode);\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);\n  var toggleColorMode = useCallback(function () {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\");\n  }, [resolvedValue, setColorMode]);\n  useEffect(function () {\n    if (!useSystemColorMode) return;\n    return addListener(setColorMode);\n  }, [useSystemColorMode, addListener, setColorMode]);\n  var context = useMemo(function () {\n    return {\n      colorMode: value != null ? value : resolvedValue,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n      forced: value !== void 0\n    };\n  }, [resolvedValue, toggleColorMode, setColorMode, value]);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    children: children\n  });\n}\nColorModeProvider.displayName = \"ColorModeProvider\";\nfunction DarkMode(props) {\n  var context = useMemo(function () {\n    return {\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true\n    };\n  }, []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, _objectSpread({\n    value: context\n  }, props));\n}\nDarkMode.displayName = \"DarkMode\";\nfunction LightMode(props) {\n  var context = useMemo(function () {\n    return {\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true\n    };\n  }, []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, _objectSpread({\n    value: context\n  }, props));\n}\nLightMode.displayName = \"LightMode\";\nexport { ColorModeProvider, DarkMode, LightMode };","map":{"version":3,"mappings":"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","names":["useSafeLayoutEffect","useCallback","useEffect","useMemo","useState","noop","getTheme","manager","fallback","type","ssr","get","ColorModeProvider","props","value","children","options","useSystemColorMode","initialColorMode","disableTransitionOnChange","colorModeManager","localStorageManager","defaultColorMode","colorMode","rawSetColorMode","resolvedColorMode","setResolvedColorMode","getColorModeUtils","preventTransition","getSystemTheme","setClassName","setDataset","addListener","resolvedValue","setColorMode","resolved","set","managerValue","toggleColorMode","context","forced","ColorModeContext","Provider","displayName","DarkMode","LightMode"],"sources":["D:\\portfolio\\node_modules\\@chakra-ui\\color-mode\\src\\color-mode-provider.tsx"],"sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\nimport { ColorModeContext } from \"./color-mode-context\"\nimport {\n  ColorMode,\n  ColorModeContextType,\n  ColorModeOptions,\n} from \"./color-mode-types\"\nimport { getColorModeUtils } from \"./color-mode.utils\"\nimport { localStorageManager, StorageManager } from \"./storage-manager\"\n\nconst noop = () => {}\n\nexport interface ColorModeProviderProps {\n  value?: ColorMode\n  children?: React.ReactNode\n  options?: ColorModeOptions\n  colorModeManager?: StorageManager\n}\n\nfunction getTheme(manager: StorageManager, fallback?: ColorMode) {\n  return manager.type === \"cookie\" && manager.ssr\n    ? manager.get(fallback)\n    : fallback\n}\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport function ColorModeProvider(props: ColorModeProviderProps) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange,\n    } = {},\n    colorModeManager = localStorageManager,\n  } = props\n\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\"\n\n  const [colorMode, rawSetColorMode] = useState(() =>\n    getTheme(colorModeManager, defaultColorMode),\n  )\n\n  const [resolvedColorMode, setResolvedColorMode] = useState(() =>\n    getTheme(colorModeManager),\n  )\n\n  const { getSystemTheme, setClassName, setDataset, addListener } = useMemo(\n    () => getColorModeUtils({ preventTransition: disableTransitionOnChange }),\n    [disableTransitionOnChange],\n  )\n\n  const resolvedValue =\n    initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode\n\n  const setColorMode = useCallback(\n    (value: ColorMode | \"system\") => {\n      //\n      const resolved = value === \"system\" ? getSystemTheme() : value\n      rawSetColorMode(resolved)\n\n      setClassName(resolved === \"dark\")\n      setDataset(resolved)\n\n      colorModeManager.set(resolved)\n    },\n    [colorModeManager, getSystemTheme, setClassName, setDataset],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme())\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    const managerValue = colorModeManager.get()\n\n    if (managerValue) {\n      setColorMode(managerValue)\n      return\n    }\n\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\")\n      return\n    }\n\n    setColorMode(defaultColorMode)\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode])\n\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\")\n  }, [resolvedValue, setColorMode])\n\n  useEffect(() => {\n    if (!useSystemColorMode) return\n    return addListener(setColorMode)\n  }, [useSystemColorMode, addListener, setColorMode])\n\n  // presence of `value` indicates a controlled context\n  const context = useMemo(\n    () => ({\n      colorMode: value ?? (resolvedValue as ColorMode),\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n      forced: value !== undefined,\n    }),\n    [resolvedValue, toggleColorMode, setColorMode, value],\n  )\n\n  return (\n    <ColorModeContext.Provider value={context}>\n      {children}\n    </ColorModeContext.Provider>\n  )\n}\n\nColorModeProvider.displayName = \"ColorModeProvider\"\n\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\nexport function DarkMode(props: React.PropsWithChildren<{}>) {\n  const context = useMemo<ColorModeContextType>(\n    () => ({\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true,\n    }),\n    [],\n  )\n\n  return <ColorModeContext.Provider value={context} {...props} />\n}\n\nDarkMode.displayName = \"DarkMode\"\n\n/**\n * Locks the color mode to `light` without any way to change it.\n */\nexport function LightMode(props: React.PropsWithChildren<{}>) {\n  const context = useMemo<ColorModeContextType>(\n    () => ({\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true,\n    }),\n    [],\n  )\n\n  return <ColorModeContext.Provider value={context} {...props} />\n}\n\nLightMode.displayName = \"LightMode\"\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}