{"ast":null,"code":"import _objectSpread from \"C:/Users/User01/Documents/portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"C:/Users/User01/Documents/portfolio/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/User01/Documents/portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/User01/Documents/portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { cancelSync, flushSync, sync } from '../../frameloop/index.mjs';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\nvar transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nvar animationTarget = 1000;\nvar id = 0;\nfunction createProjectionNode(_ref) {\n  var attachResizeListener = _ref.attachResizeListener,\n    defaultParent = _ref.defaultParent,\n    measureScroll = _ref.measureScroll,\n    checkIsScrollRoot = _ref.checkIsScrollRoot,\n    _resetTransform = _ref.resetTransform;\n  return /*#__PURE__*/function () {\n    function ProjectionNode(elementId) {\n      var _this = this;\n      var latestValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n      _classCallCheck(this, ProjectionNode);\n      /**\n       * A unique ID generated for every projection node.\n       */\n      this.id = id++;\n      /**\n       * An id that represents a unique session instigated by startUpdate.\n       */\n      this.animationId = 0;\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n      this.isLayoutDirty = false;\n      this.isTransformDirty = false;\n      /**\n       * Flag to true if we think the projection calculations for this or any\n       * child might need recalculating as a result of an updated transform or layout animation.\n       */\n      this.isProjectionDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n      this.shouldResetTransform = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to layoutly\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n      this.eventHandlers = new Map();\n      // Note: Currently only running on root node\n      this.potentialNodes = new Map();\n      this.checkUpdateFailed = function () {\n        if (_this.isUpdating) {\n          _this.isUpdating = false;\n          _this.clearAllSnapshots();\n        }\n      };\n      /**\n       * This is a multi-step process as shared nodes might be of different depths. Nodes\n       * are sorted by depth order, so we need to resolve the entire tree before moving to\n       * the next step.\n       */\n      this.updateProjection = function () {\n        _this.nodes.forEach(propagateDirtyNodes);\n        _this.nodes.forEach(resolveTargetDelta);\n        _this.nodes.forEach(calcProjection);\n      };\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n      this.sharedNodes = new Map();\n      this.elementId = elementId;\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? [].concat(_toConsumableArray(parent.path), [parent]) : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n      elementId && this.root.registerPotentialNode(elementId, this);\n      for (var i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n    _createClass(ProjectionNode, [{\n      key: \"addEventListener\",\n      value: function addEventListener(name, handler) {\n        if (!this.eventHandlers.has(name)) {\n          this.eventHandlers.set(name, new SubscriptionManager());\n        }\n        return this.eventHandlers.get(name).add(handler);\n      }\n    }, {\n      key: \"notifyListeners\",\n      value: function notifyListeners(name) {\n        var subscriptionManager = this.eventHandlers.get(name);\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        subscriptionManager && subscriptionManager.notify.apply(subscriptionManager, args);\n      }\n    }, {\n      key: \"hasListeners\",\n      value: function hasListeners(name) {\n        return this.eventHandlers.has(name);\n      }\n    }, {\n      key: \"registerPotentialNode\",\n      value: function registerPotentialNode(elementId, node) {\n        this.potentialNodes.set(elementId, node);\n      }\n      /**\n       * Lifecycles\n       */\n    }, {\n      key: \"mount\",\n      value: function mount(instance) {\n        var _this2 = this;\n        var isLayoutDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        if (this.instance) return;\n        this.isSVG = instance instanceof SVGElement && instance.tagName !== \"svg\";\n        this.instance = instance;\n        var _this$options = this.options,\n          layoutId = _this$options.layoutId,\n          layout = _this$options.layout,\n          visualElement = _this$options.visualElement;\n        if (visualElement && !visualElement.current) {\n          visualElement.mount(instance);\n        }\n        this.root.nodes.add(this);\n        this.parent && this.parent.children.add(this);\n        this.elementId && this.root.potentialNodes.delete(this.elementId);\n        if (isLayoutDirty && (layout || layoutId)) {\n          this.isLayoutDirty = true;\n        }\n        if (attachResizeListener) {\n          var cancelDelay;\n          var resizeUnblockUpdate = function resizeUnblockUpdate() {\n            return _this2.root.updateBlockedByResize = false;\n          };\n          attachResizeListener(instance, function () {\n            _this2.root.updateBlockedByResize = true;\n            cancelDelay && cancelDelay();\n            cancelDelay = delay(resizeUnblockUpdate, 250);\n            if (globalProjectionState.hasAnimatedSinceResize) {\n              globalProjectionState.hasAnimatedSinceResize = false;\n              _this2.nodes.forEach(finishAnimation);\n            }\n          });\n        }\n        if (layoutId) {\n          this.root.registerSharedNode(layoutId, this);\n        }\n        // Only register the handler if it requires layout animation\n        if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n          this.addEventListener(\"didUpdate\", function (_ref2) {\n            var delta = _ref2.delta,\n              hasLayoutChanged = _ref2.hasLayoutChanged,\n              hasRelativeTargetChanged = _ref2.hasRelativeTargetChanged,\n              newLayout = _ref2.layout;\n            if (_this2.isTreeAnimationBlocked()) {\n              _this2.target = undefined;\n              _this2.relativeTarget = undefined;\n              return;\n            }\n            // TODO: Check here if an animation exists\n            var layoutTransition = _this2.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;\n            var _visualElement$getPro = visualElement.getProps(),\n              onLayoutAnimationStart = _visualElement$getPro.onLayoutAnimationStart,\n              onLayoutAnimationComplete = _visualElement$getPro.onLayoutAnimationComplete;\n            /**\n             * The target layout of the element might stay the same,\n             * but its position relative to its parent has changed.\n             */\n            var targetChanged = !_this2.targetLayout || !boxEquals(_this2.targetLayout, newLayout) || hasRelativeTargetChanged;\n            /**\n             * If the layout hasn't seemed to have changed, it might be that the\n             * element is visually in the same place in the document but its position\n             * relative to its parent has indeed changed. So here we check for that.\n             */\n            var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n            if (_this2.options.layoutRoot || _this2.resumeFrom && _this2.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this2.currentAnimation)) {\n              if (_this2.resumeFrom) {\n                _this2.resumingFrom = _this2.resumeFrom;\n                _this2.resumingFrom.resumingFrom = undefined;\n              }\n              _this2.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n              var animationOptions = _objectSpread(_objectSpread({}, getValueTransition(layoutTransition, \"layout\")), {}, {\n                onPlay: onLayoutAnimationStart,\n                onComplete: onLayoutAnimationComplete\n              });\n              if (visualElement.shouldReduceMotion || _this2.options.layoutRoot) {\n                animationOptions.delay = 0;\n                animationOptions.type = false;\n              }\n              _this2.startAnimation(animationOptions);\n            } else {\n              /**\n               * If the layout hasn't changed and we have an animation that hasn't started yet,\n               * finish it immediately. Otherwise it will be animating from a location\n               * that was probably never commited to screen and look like a jumpy box.\n               */\n              if (!hasLayoutChanged && _this2.animationProgress === 0) {\n                finishAnimation(_this2);\n              }\n              if (_this2.isLead() && _this2.options.onExitComplete) {\n                _this2.options.onExitComplete();\n              }\n            }\n            _this2.targetLayout = newLayout;\n          });\n        }\n      }\n    }, {\n      key: \"unmount\",\n      value: function unmount() {\n        this.options.layoutId && this.willUpdate();\n        this.root.nodes.remove(this);\n        var stack = this.getStack();\n        stack && stack.remove(this);\n        this.parent && this.parent.children.delete(this);\n        this.instance = undefined;\n        cancelSync.preRender(this.updateProjection);\n      }\n      // only on the root\n    }, {\n      key: \"blockUpdate\",\n      value: function blockUpdate() {\n        this.updateManuallyBlocked = true;\n      }\n    }, {\n      key: \"unblockUpdate\",\n      value: function unblockUpdate() {\n        this.updateManuallyBlocked = false;\n      }\n    }, {\n      key: \"isUpdateBlocked\",\n      value: function isUpdateBlocked() {\n        return this.updateManuallyBlocked || this.updateBlockedByResize;\n      }\n    }, {\n      key: \"isTreeAnimationBlocked\",\n      value: function isTreeAnimationBlocked() {\n        return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;\n      }\n      // Note: currently only running on root node\n    }, {\n      key: \"startUpdate\",\n      value: function startUpdate() {\n        if (this.isUpdateBlocked()) return;\n        this.isUpdating = true;\n        this.nodes && this.nodes.forEach(resetRotation);\n        this.animationId++;\n      }\n    }, {\n      key: \"getTransformTemplate\",\n      value: function getTransformTemplate() {\n        var visualElement = this.options.visualElement;\n        return visualElement && visualElement.getProps().transformTemplate;\n      }\n    }, {\n      key: \"willUpdate\",\n      value: function willUpdate() {\n        var shouldNotifyListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        if (this.root.isUpdateBlocked()) {\n          this.options.onExitComplete && this.options.onExitComplete();\n          return;\n        }\n        !this.root.isUpdating && this.root.startUpdate();\n        if (this.isLayoutDirty) return;\n        this.isLayoutDirty = true;\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          node.shouldResetTransform = true;\n          node.updateScroll(\"snapshot\");\n          if (node.options.layoutRoot) {\n            node.willUpdate(false);\n          }\n        }\n        var _this$options2 = this.options,\n          layoutId = _this$options2.layoutId,\n          layout = _this$options2.layout;\n        if (layoutId === undefined && !layout) return;\n        var transformTemplate = this.getTransformTemplate();\n        this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n        this.updateSnapshot();\n        shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n      }\n      // Note: Currently only running on root node\n    }, {\n      key: \"didUpdate\",\n      value: function didUpdate() {\n        var updateWasBlocked = this.isUpdateBlocked();\n        // When doing an instant transition, we skip the layout update,\n        // but should still clean up the measurements so that the next\n        // snapshot could be taken correctly.\n        if (updateWasBlocked) {\n          this.unblockUpdate();\n          this.clearAllSnapshots();\n          this.nodes.forEach(clearMeasurements);\n          return;\n        }\n        if (!this.isUpdating) return;\n        this.isUpdating = false;\n        /**\n         * Search for and mount newly-added projection elements.\n         *\n         * TODO: Every time a new component is rendered we could search up the tree for\n         * the closest mounted node and query from there rather than document.\n         */\n        if (this.potentialNodes.size) {\n          this.potentialNodes.forEach(mountNodeEarly);\n          this.potentialNodes.clear();\n        }\n        /**\n         * Write\n         */\n        this.nodes.forEach(resetTransformStyle);\n        /**\n         * Read ==================\n         */\n        // Update layout measurements of updated children\n        this.nodes.forEach(updateLayout);\n        /**\n         * Write\n         */\n        // Notify listeners that the layout is updated\n        this.nodes.forEach(notifyLayoutUpdate);\n        this.clearAllSnapshots();\n        // Flush any scheduled updates\n        flushSync.update();\n        flushSync.preRender();\n        flushSync.render();\n      }\n    }, {\n      key: \"clearAllSnapshots\",\n      value: function clearAllSnapshots() {\n        this.nodes.forEach(clearSnapshot);\n        this.sharedNodes.forEach(removeLeadSnapshots);\n      }\n    }, {\n      key: \"scheduleUpdateProjection\",\n      value: function scheduleUpdateProjection() {\n        sync.preRender(this.updateProjection, false, true);\n      }\n    }, {\n      key: \"scheduleCheckAfterUnmount\",\n      value: function scheduleCheckAfterUnmount() {\n        var _this3 = this;\n        /**\n         * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n         * we manually call didUpdate to give a chance to the siblings to animate.\n         * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n         */\n        sync.postRender(function () {\n          if (_this3.isLayoutDirty) {\n            _this3.root.didUpdate();\n          } else {\n            _this3.root.checkUpdateFailed();\n          }\n        });\n      }\n      /**\n       * Update measurements\n       */\n    }, {\n      key: \"updateSnapshot\",\n      value: function updateSnapshot() {\n        if (this.snapshot || !this.instance) return;\n        this.snapshot = this.measure();\n      }\n    }, {\n      key: \"updateLayout\",\n      value: function updateLayout() {\n        if (!this.instance) return;\n        // TODO: Incorporate into a forwarded scroll offset\n        this.updateScroll();\n        if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n          return;\n        }\n        /**\n         * When a node is mounted, it simply resumes from the prevLead's\n         * snapshot instead of taking a new one, but the ancestors scroll\n         * might have updated while the prevLead is unmounted. We need to\n         * update the scroll again to make sure the layout we measure is\n         * up to date.\n         */\n        if (this.resumeFrom && !this.resumeFrom.instance) {\n          for (var i = 0; i < this.path.length; i++) {\n            var node = this.path[i];\n            node.updateScroll();\n          }\n        }\n        var prevLayout = this.layout;\n        this.layout = this.measure(false);\n        this.layoutCorrected = createBox();\n        this.isLayoutDirty = false;\n        this.projectionDelta = undefined;\n        this.notifyListeners(\"measure\", this.layout.layoutBox);\n        var visualElement = this.options.visualElement;\n        visualElement && visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n      }\n    }, {\n      key: \"updateScroll\",\n      value: function updateScroll() {\n        var phase = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"measure\";\n        var needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n        if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {\n          needsMeasurement = false;\n        }\n        if (needsMeasurement) {\n          this.scroll = {\n            animationId: this.root.animationId,\n            phase: phase,\n            isRoot: checkIsScrollRoot(this.instance),\n            offset: measureScroll(this.instance)\n          };\n        }\n      }\n    }, {\n      key: \"resetTransform\",\n      value: function resetTransform() {\n        if (!_resetTransform) return;\n        var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n        var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n        var transformTemplate = this.getTransformTemplate();\n        var transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n        var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n        if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n          _resetTransform(this.instance, transformTemplateValue);\n          this.shouldResetTransform = false;\n          this.scheduleRender();\n        }\n      }\n    }, {\n      key: \"measure\",\n      value: function measure() {\n        var removeTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var pageBox = this.measurePageBox();\n        var layoutBox = this.removeElementScroll(pageBox);\n        /**\n         * Measurements taken during the pre-render stage\n         * still have transforms applied so we remove them\n         * via calculation.\n         */\n        if (removeTransform) {\n          layoutBox = this.removeTransform(layoutBox);\n        }\n        roundBox(layoutBox);\n        return {\n          animationId: this.root.animationId,\n          measuredBox: pageBox,\n          layoutBox: layoutBox,\n          latestValues: {},\n          source: this.id\n        };\n      }\n    }, {\n      key: \"measurePageBox\",\n      value: function measurePageBox() {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return createBox();\n        var box = visualElement.measureViewportBox();\n        // Remove viewport scroll to give page-relative coordinates\n        var scroll = this.root.scroll;\n        if (scroll) {\n          translateAxis(box.x, scroll.offset.x);\n          translateAxis(box.y, scroll.offset.y);\n        }\n        return box;\n      }\n    }, {\n      key: \"removeElementScroll\",\n      value: function removeElementScroll(box) {\n        var boxWithoutScroll = createBox();\n        copyBoxInto(boxWithoutScroll, box);\n        /**\n         * Performance TODO: Keep a cumulative scroll offset down the tree\n         * rather than loop back up the path.\n         */\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          var scroll = node.scroll,\n            options = node.options;\n          if (node !== this.root && scroll && options.layoutScroll) {\n            /**\n             * If this is a new scroll root, we want to remove all previous scrolls\n             * from the viewport box.\n             */\n            if (scroll.isRoot) {\n              copyBoxInto(boxWithoutScroll, box);\n              var rootScroll = this.root.scroll;\n              /**\n               * Undo the application of page scroll that was originally added\n               * to the measured bounding box.\n               */\n              if (rootScroll) {\n                translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n              }\n            }\n            translateAxis(boxWithoutScroll.x, scroll.offset.x);\n            translateAxis(boxWithoutScroll.y, scroll.offset.y);\n          }\n        }\n        return boxWithoutScroll;\n      }\n    }, {\n      key: \"applyTransform\",\n      value: function applyTransform(box) {\n        var transformOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var withTransforms = createBox();\n        copyBoxInto(withTransforms, box);\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n            transformBox(withTransforms, {\n              x: -node.scroll.offset.x,\n              y: -node.scroll.offset.y\n            });\n          }\n          if (!hasTransform(node.latestValues)) continue;\n          transformBox(withTransforms, node.latestValues);\n        }\n        if (hasTransform(this.latestValues)) {\n          transformBox(withTransforms, this.latestValues);\n        }\n        return withTransforms;\n      }\n    }, {\n      key: \"removeTransform\",\n      value: function removeTransform(box) {\n        var boxWithoutTransform = createBox();\n        copyBoxInto(boxWithoutTransform, box);\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          if (!node.instance) continue;\n          if (!hasTransform(node.latestValues)) continue;\n          hasScale(node.latestValues) && node.updateSnapshot();\n          var sourceBox = createBox();\n          var nodeBox = node.measurePageBox();\n          copyBoxInto(sourceBox, nodeBox);\n          removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n        }\n        if (hasTransform(this.latestValues)) {\n          removeBoxTransforms(boxWithoutTransform, this.latestValues);\n        }\n        return boxWithoutTransform;\n      }\n      /**\n       *\n       */\n    }, {\n      key: \"setTargetDelta\",\n      value: function setTargetDelta(delta) {\n        this.targetDelta = delta;\n        this.isProjectionDirty = true;\n        this.root.scheduleUpdateProjection();\n      }\n    }, {\n      key: \"setOptions\",\n      value: function setOptions(options) {\n        this.options = _objectSpread(_objectSpread(_objectSpread({}, this.options), options), {}, {\n          crossfade: options.crossfade !== undefined ? options.crossfade : true\n        });\n      }\n    }, {\n      key: \"clearMeasurements\",\n      value: function clearMeasurements() {\n        this.scroll = undefined;\n        this.layout = undefined;\n        this.snapshot = undefined;\n        this.prevTransformTemplateValue = undefined;\n        this.targetDelta = undefined;\n        this.target = undefined;\n        this.isLayoutDirty = false;\n      }\n      /**\n       * Frame calculations\n       */\n    }, {\n      key: \"resolveTargetDelta\",\n      value: function resolveTargetDelta() {\n        /**\n         * Once the dirty status of nodes has been spread through the tree, we also\n         * need to check if we have a shared node of a different depth that has itself\n         * been dirtied.\n         */\n        var lead = this.getLead();\n        this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n        this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n        /**\n         * We don't use transform for this step of processing so we don't\n         * need to check whether any nodes have changed transform.\n         */\n        if (!this.isProjectionDirty && !this.attemptToResolveRelativeTarget) return;\n        var _this$options3 = this.options,\n          layout = _this$options3.layout,\n          layoutId = _this$options3.layoutId;\n        /**\n         * If we have no layout, we can't perform projection, so early return\n         */\n        if (!this.layout || !(layout || layoutId)) return;\n        /**\n         * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n         * a relativeParent. This will allow a component to perform scale correction\n         * even if no animation has started.\n         */\n        // TODO If this is unsuccessful this currently happens every frame\n        if (!this.targetDelta && !this.relativeTarget) {\n          // TODO: This is a semi-repetition of further down this function, make DRY\n          var relativeParent = this.getClosestProjectingParent();\n          if (relativeParent && relativeParent.layout) {\n            this.relativeParent = relativeParent;\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          } else {\n            this.relativeParent = this.relativeTarget = undefined;\n          }\n        }\n        /**\n         * If we have no relative target or no target delta our target isn't valid\n         * for this frame.\n         */\n        if (!this.relativeTarget && !this.targetDelta) return;\n        /**\n         * Lazy-init target data structure\n         */\n        if (!this.target) {\n          this.target = createBox();\n          this.targetWithTransforms = createBox();\n        }\n        /**\n         * If we've got a relative box for this component, resolve it into a target relative to the parent.\n         */\n        if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {\n          calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n          /**\n           * If we've only got a targetDelta, resolve it into a target\n           */\n        } else if (this.targetDelta) {\n          if (Boolean(this.resumingFrom)) {\n            // TODO: This is creating a new object every frame\n            this.target = this.applyTransform(this.layout.layoutBox);\n          } else {\n            copyBoxInto(this.target, this.layout.layoutBox);\n          }\n          applyBoxDelta(this.target, this.targetDelta);\n        } else {\n          /**\n           * If no target, use own layout as target\n           */\n          copyBoxInto(this.target, this.layout.layoutBox);\n        }\n        /**\n         * If we've been told to attempt to resolve a relative target, do so.\n         */\n        if (this.attemptToResolveRelativeTarget) {\n          this.attemptToResolveRelativeTarget = false;\n          var _relativeParent = this.getClosestProjectingParent();\n          if (_relativeParent && Boolean(_relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !_relativeParent.options.layoutScroll && _relativeParent.target) {\n            this.relativeParent = _relativeParent;\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.target, _relativeParent.target);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          } else {\n            this.relativeParent = this.relativeTarget = undefined;\n          }\n        }\n      }\n    }, {\n      key: \"getClosestProjectingParent\",\n      value: function getClosestProjectingParent() {\n        if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) {\n          return undefined;\n        }\n        if ((this.parent.relativeTarget || this.parent.targetDelta || this.parent.options.layoutRoot) && this.parent.layout) {\n          return this.parent;\n        } else {\n          return this.parent.getClosestProjectingParent();\n        }\n      }\n    }, {\n      key: \"calcProjection\",\n      value: function calcProjection() {\n        var isProjectionDirty = this.isProjectionDirty,\n          isTransformDirty = this.isTransformDirty;\n        this.isProjectionDirty = this.isTransformDirty = false;\n        var lead = this.getLead();\n        var isShared = Boolean(this.resumingFrom) || this !== lead;\n        var canSkip = true;\n        if (isProjectionDirty) canSkip = false;\n        if (isShared && isTransformDirty) canSkip = false;\n        if (canSkip) return;\n        var _this$options4 = this.options,\n          layout = _this$options4.layout,\n          layoutId = _this$options4.layoutId;\n        /**\n         * If this section of the tree isn't animating we can\n         * delete our target sources for the following frame.\n         */\n        this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);\n        if (!this.isTreeAnimating) {\n          this.targetDelta = this.relativeTarget = undefined;\n        }\n        if (!this.layout || !(layout || layoutId)) return;\n        /**\n         * Reset the corrected box with the latest values from box, as we're then going\n         * to perform mutative operations on it.\n         */\n        copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n        /**\n         * Apply all the parent deltas to this box to produce the corrected box. This\n         * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n         */\n        applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n        var target = lead.target;\n        if (!target) return;\n        if (!this.projectionDelta) {\n          this.projectionDelta = createDelta();\n          this.projectionDeltaWithTransform = createDelta();\n        }\n        var prevTreeScaleX = this.treeScale.x;\n        var prevTreeScaleY = this.treeScale.y;\n        var prevProjectionTransform = this.projectionTransform;\n        /**\n         * Update the delta between the corrected box and the target box before user-set transforms were applied.\n         * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n         * for our layout reprojection, but still allow them to be scaled correctly by the user.\n         * It might be that to simplify this we may want to accept that user-set scale is also corrected\n         * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n         * to allow people to choose whether these styles are corrected based on just the\n         * layout reprojection or the final bounding box.\n         */\n        calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n        this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n        if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n          this.hasProjected = true;\n          this.scheduleRender();\n          this.notifyListeners(\"projectionUpdate\", target);\n        }\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.isVisible = false;\n        // TODO: Schedule render\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        this.isVisible = true;\n        // TODO: Schedule render\n      }\n    }, {\n      key: \"scheduleRender\",\n      value: function scheduleRender() {\n        var notifyAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this.options.scheduleRender && this.options.scheduleRender();\n        if (notifyAll) {\n          var stack = this.getStack();\n          stack && stack.scheduleRender();\n        }\n        if (this.resumingFrom && !this.resumingFrom.instance) {\n          this.resumingFrom = undefined;\n        }\n      }\n    }, {\n      key: \"setAnimationOrigin\",\n      value: function setAnimationOrigin(delta) {\n        var _this4 = this;\n        var hasOnlyRelativeTargetChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var snapshot = this.snapshot;\n        var snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n        var mixedValues = _objectSpread({}, this.latestValues);\n        var targetDelta = createDelta();\n        if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {\n          this.relativeTarget = this.relativeTargetOrigin = undefined;\n        }\n        this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n        var relativeLayout = createBox();\n        var snapshotSource = snapshot ? snapshot.source : undefined;\n        var layoutSource = this.layout ? this.layout.source : undefined;\n        var isSharedLayoutAnimation = snapshotSource !== layoutSource;\n        var stack = this.getStack();\n        var isOnlyMember = !stack || stack.members.length <= 1;\n        var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n        this.animationProgress = 0;\n        this.mixTargetDelta = function (latest) {\n          var progress = latest / 1000;\n          mixAxisDelta(targetDelta.x, delta.x, progress);\n          mixAxisDelta(targetDelta.y, delta.y, progress);\n          _this4.setTargetDelta(targetDelta);\n          if (_this4.relativeTarget && _this4.relativeTargetOrigin && _this4.layout && _this4.relativeParent && _this4.relativeParent.layout) {\n            calcRelativePosition(relativeLayout, _this4.layout.layoutBox, _this4.relativeParent.layout.layoutBox);\n            mixBox(_this4.relativeTarget, _this4.relativeTargetOrigin, relativeLayout, progress);\n          }\n          if (isSharedLayoutAnimation) {\n            _this4.animationValues = mixedValues;\n            mixValues(mixedValues, snapshotLatestValues, _this4.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n          }\n          _this4.root.scheduleUpdateProjection();\n          _this4.scheduleRender();\n          _this4.animationProgress = progress;\n        };\n        this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n      }\n    }, {\n      key: \"startAnimation\",\n      value: function startAnimation(options) {\n        var _this5 = this;\n        this.notifyListeners(\"animationStart\");\n        this.currentAnimation && this.currentAnimation.stop();\n        if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n          this.resumingFrom.currentAnimation.stop();\n        }\n        if (this.pendingAnimation) {\n          cancelSync.update(this.pendingAnimation);\n          this.pendingAnimation = undefined;\n        }\n        /**\n         * Start the animation in the next frame to have a frame with progress 0,\n         * where the target is the same as when the animation started, so we can\n         * calculate the relative positions correctly for instant transitions.\n         */\n        this.pendingAnimation = sync.update(function () {\n          globalProjectionState.hasAnimatedSinceResize = true;\n          _this5.currentAnimation = animate(0, animationTarget, _objectSpread(_objectSpread({}, options), {}, {\n            onUpdate: function onUpdate(latest) {\n              _this5.mixTargetDelta(latest);\n              options.onUpdate && options.onUpdate(latest);\n            },\n            onComplete: function onComplete() {\n              options.onComplete && options.onComplete();\n              _this5.completeAnimation();\n            }\n          }));\n          if (_this5.resumingFrom) {\n            _this5.resumingFrom.currentAnimation = _this5.currentAnimation;\n          }\n          _this5.pendingAnimation = undefined;\n        });\n      }\n    }, {\n      key: \"completeAnimation\",\n      value: function completeAnimation() {\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = undefined;\n          this.resumingFrom.preserveOpacity = undefined;\n        }\n        var stack = this.getStack();\n        stack && stack.exitAnimationComplete();\n        this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n        this.notifyListeners(\"animationComplete\");\n      }\n    }, {\n      key: \"finishAnimation\",\n      value: function finishAnimation() {\n        if (this.currentAnimation) {\n          this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n          this.currentAnimation.stop();\n        }\n        this.completeAnimation();\n      }\n    }, {\n      key: \"applyTransformsToTarget\",\n      value: function applyTransformsToTarget() {\n        var lead = this.getLead();\n        var targetWithTransforms = lead.targetWithTransforms,\n          target = lead.target,\n          layout = lead.layout,\n          latestValues = lead.latestValues;\n        if (!targetWithTransforms || !target || !layout) return;\n        /**\n         * If we're only animating position, and this element isn't the lead element,\n         * then instead of projecting into the lead box we instead want to calculate\n         * a new target that aligns the two boxes but maintains the layout shape.\n         */\n        if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n          target = this.target || createBox();\n          var xLength = calcLength(this.layout.layoutBox.x);\n          target.x.min = lead.target.x.min;\n          target.x.max = target.x.min + xLength;\n          var yLength = calcLength(this.layout.layoutBox.y);\n          target.y.min = lead.target.y.min;\n          target.y.max = target.y.min + yLength;\n        }\n        copyBoxInto(targetWithTransforms, target);\n        /**\n         * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n         * This is the final box that we will then project into by calculating a transform delta and\n         * applying it to the corrected box.\n         */\n        transformBox(targetWithTransforms, latestValues);\n        /**\n         * Update the delta between the corrected box and the final target box, after\n         * user-set transforms are applied to it. This will be used by the renderer to\n         * create a transform style that will reproject the element from its layout layout\n         * into the desired bounding box.\n         */\n        calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n      }\n    }, {\n      key: \"registerSharedNode\",\n      value: function registerSharedNode(layoutId, node) {\n        if (!this.sharedNodes.has(layoutId)) {\n          this.sharedNodes.set(layoutId, new NodeStack());\n        }\n        var stack = this.sharedNodes.get(layoutId);\n        stack.add(node);\n        var config = node.options.initialPromotionConfig;\n        node.promote({\n          transition: config ? config.transition : undefined,\n          preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node) : undefined\n        });\n      }\n    }, {\n      key: \"isLead\",\n      value: function isLead() {\n        var stack = this.getStack();\n        return stack ? stack.lead === this : true;\n      }\n    }, {\n      key: \"getLead\",\n      value: function getLead() {\n        var _a;\n        var layoutId = this.options.layoutId;\n        return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n      }\n    }, {\n      key: \"getPrevLead\",\n      value: function getPrevLead() {\n        var _a;\n        var layoutId = this.options.layoutId;\n        return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n      }\n    }, {\n      key: \"getStack\",\n      value: function getStack() {\n        var layoutId = this.options.layoutId;\n        if (layoutId) return this.root.sharedNodes.get(layoutId);\n      }\n    }, {\n      key: \"promote\",\n      value: function promote() {\n        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          needsReset = _ref3.needsReset,\n          transition = _ref3.transition,\n          preserveFollowOpacity = _ref3.preserveFollowOpacity;\n        var stack = this.getStack();\n        if (stack) stack.promote(this, preserveFollowOpacity);\n        if (needsReset) {\n          this.projectionDelta = undefined;\n          this.needsReset = true;\n        }\n        if (transition) this.setOptions({\n          transition: transition\n        });\n      }\n    }, {\n      key: \"relegate\",\n      value: function relegate() {\n        var stack = this.getStack();\n        if (stack) {\n          return stack.relegate(this);\n        } else {\n          return false;\n        }\n      }\n    }, {\n      key: \"resetRotation\",\n      value: function resetRotation() {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return;\n        // If there's no detected rotation values, we can early return without a forced render.\n        var hasRotate = false;\n        /**\n         * An unrolled check for rotation values. Most elements don't have any rotation and\n         * skipping the nested loop and new object creation is 50% faster.\n         */\n        var latestValues = visualElement.latestValues;\n        if (latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ) {\n          hasRotate = true;\n        }\n        // If there's no rotation values, we don't need to do any more.\n        if (!hasRotate) return;\n        var resetValues = {};\n        // Check the rotate value of all axes and reset to 0\n        for (var i = 0; i < transformAxes.length; i++) {\n          var key = \"rotate\" + transformAxes[i];\n          // Record the rotation and then temporarily set it to 0\n          if (latestValues[key]) {\n            resetValues[key] = latestValues[key];\n            visualElement.setStaticValue(key, 0);\n          }\n        }\n        // Force a render of this element to apply the transform with all rotations\n        // set to 0.\n        visualElement.render();\n        // Put back all the values we reset\n        for (var _key2 in resetValues) {\n          visualElement.setStaticValue(_key2, resetValues[_key2]);\n        }\n        // Schedule a render for the next frame. This ensures we won't visually\n        // see the element with the reset rotate value applied.\n        visualElement.scheduleRender();\n      }\n    }, {\n      key: \"getProjectionStyles\",\n      value: function getProjectionStyles() {\n        var styleProp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var _a, _b;\n        // TODO: Return lifecycle-persistent object\n        var styles = {};\n        if (!this.instance || this.isSVG) return styles;\n        if (!this.isVisible) {\n          return {\n            visibility: \"hidden\"\n          };\n        } else {\n          styles.visibility = \"\";\n        }\n        var transformTemplate = this.getTransformTemplate();\n        if (this.needsReset) {\n          this.needsReset = false;\n          styles.opacity = \"\";\n          styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n          styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n          return styles;\n        }\n        var lead = this.getLead();\n        if (!this.projectionDelta || !this.layout || !lead.target) {\n          var emptyStyles = {};\n          if (this.options.layoutId) {\n            emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n            emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n          }\n          if (this.hasProjected && !hasTransform(this.latestValues)) {\n            emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n            this.hasProjected = false;\n          }\n          return emptyStyles;\n        }\n        var valuesToRender = lead.animationValues || lead.latestValues;\n        this.applyTransformsToTarget();\n        styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n        if (transformTemplate) {\n          styles.transform = transformTemplate(valuesToRender, styles.transform);\n        }\n        var _this$projectionDelta = this.projectionDelta,\n          x = _this$projectionDelta.x,\n          y = _this$projectionDelta.y;\n        styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n        if (lead.animationValues) {\n          /**\n           * If the lead component is animating, assign this either the entering/leaving\n           * opacity\n           */\n          styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n        } else {\n          /**\n           * Or we're not animating at all, set the lead component to its layout\n           * opacity and other components to hidden.\n           */\n          styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n        }\n        /**\n         * Apply scale correction\n         */\n        for (var key in scaleCorrectors) {\n          if (valuesToRender[key] === undefined) continue;\n          var _scaleCorrectors$key = scaleCorrectors[key],\n            correct = _scaleCorrectors$key.correct,\n            applyTo = _scaleCorrectors$key.applyTo;\n          /**\n           * Only apply scale correction to the value if we have an\n           * active projection transform. Otherwise these values become\n           * vulnerable to distortion if the element changes size without\n           * a corresponding layout animation.\n           */\n          var corrected = styles.transform === \"none\" ? valuesToRender[key] : correct(valuesToRender[key], lead);\n          if (applyTo) {\n            var num = applyTo.length;\n            for (var i = 0; i < num; i++) {\n              styles[applyTo[i]] = corrected;\n            }\n          } else {\n            styles[key] = corrected;\n          }\n        }\n        /**\n         * Disable pointer events on follow components. This is to ensure\n         * that if a follow component covers a lead component it doesn't block\n         * pointer events on the lead.\n         */\n        if (this.options.layoutId) {\n          styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n        }\n        return styles;\n      }\n    }, {\n      key: \"clearSnapshot\",\n      value: function clearSnapshot() {\n        this.resumeFrom = this.snapshot = undefined;\n      }\n      // Only run on root\n    }, {\n      key: \"resetTree\",\n      value: function resetTree() {\n        this.root.nodes.forEach(function (node) {\n          var _a;\n          return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n        });\n        this.root.nodes.forEach(clearMeasurements);\n        this.root.sharedNodes.clear();\n      }\n    }]);\n    return ProjectionNode;\n  }();\n}\nfunction updateLayout(node) {\n  node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n  var _a;\n  var snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    var _node$layout = node.layout,\n      layout = _node$layout.layoutBox,\n      measuredLayout = _node$layout.measuredBox;\n    var animationType = node.options.animationType;\n    var isShared = snapshot.source !== node.layout.source;\n    // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n    if (animationType === \"size\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        var length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n      eachAxis(function (axis) {\n        var axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        var length = calcLength(layout[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    }\n    var layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n    var visualDelta = createDelta();\n    if (isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n    } else {\n      calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n    }\n    var hasLayoutChanged = !isDeltaZero(layoutDelta);\n    var hasRelativeTargetChanged = false;\n    if (!node.resumeFrom) {\n      var relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n      if (relativeParent && !relativeParent.resumeFrom) {\n        var parentSnapshot = relativeParent.snapshot,\n          parentLayout = relativeParent.layout;\n        if (parentSnapshot && parentLayout) {\n          var relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n          var relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n          if (!boxEquals(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n          if (relativeParent.options.layoutRoot) {\n            node.relativeTarget = relativeLayout;\n            node.relativeTargetOrigin = relativeSnapshot;\n            node.relativeParent = relativeParent;\n          }\n        }\n      }\n    }\n    node.notifyListeners(\"didUpdate\", {\n      layout: layout,\n      snapshot: snapshot,\n      delta: visualDelta,\n      layoutDelta: layoutDelta,\n      hasLayoutChanged: hasLayoutChanged,\n      hasRelativeTargetChanged: hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    var onExitComplete = node.options.onExitComplete;\n    onExitComplete && onExitComplete();\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n  node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n  /**\n   * Propagate isProjectionDirty. Nodes are ordered by depth, so if the parent here\n   * is dirty we can simply pass this forward.\n   */\n  node.isProjectionDirty || (node.isProjectionDirty = Boolean(node.parent && node.parent.isProjectionDirty));\n  /**\n   * Propagate isTransformDirty.\n   */\n  node.isTransformDirty || (node.isTransformDirty = Boolean(node.parent && node.parent.isTransformDirty));\n}\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n  var visualElement = node.options.visualElement;\n  if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notify(\"BeforeLayoutMeasure\");\n  }\n  node.resetTransform();\n}\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n  node.calcProjection();\n}\nfunction resetRotation(node) {\n  node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mix(delta.translate, 0, p);\n  output.scale = mix(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n  output.min = mix(from.min, to.min, p);\n  output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\nvar defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\nfunction mountNodeEarly(node, elementId) {\n  /**\n   * Rather than searching the DOM from document we can search the\n   * path for the deepest mounted ancestor and search from there\n   */\n  var searchNode = node.root;\n  for (var i = node.path.length - 1; i >= 0; i--) {\n    if (Boolean(node.path[i].instance)) {\n      searchNode = node.path[i];\n      break;\n    }\n  }\n  var searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n  var element = searchElement.querySelector(\"[data-projection-id=\\\"\".concat(elementId, \"\\\"]\"));\n  if (element) node.mount(element, true);\n}\nfunction roundAxis(axis) {\n  axis.min = Math.round(axis.min);\n  axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n  return animationType === \"position\" || animationType === \"preserve-aspect\" && !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2);\n}\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };","map":{"version":3,"names":["cancelSync","flushSync","sync","animate","SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","isNear","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEquals","isDeltaZero","aspectRatio","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","has2DTranslate","FlatTree","resolveMotionValue","globalProjectionState","delay","mix","transformAxes","animationTarget","id","createProjectionNode","_ref","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","ProjectionNode","elementId","_this","latestValues","arguments","length","undefined","parent","_classCallCheck","animationId","children","Set","options","isTreeAnimating","isAnimationBlocked","isLayoutDirty","isTransformDirty","isProjectionDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","propagateDirtyNodes","resolveTargetDelta","calcProjection","hasProjected","isVisible","animationProgress","sharedNodes","root","path","concat","_toConsumableArray","depth","registerPotentialNode","i","_createClass","key","value","addEventListener","name","handler","has","set","get","add","notifyListeners","subscriptionManager","_len","args","Array","_key","notify","apply","hasListeners","node","mount","instance","_this2","SVGElement","tagName","_this$options","layoutId","layout","visualElement","current","delete","cancelDelay","resizeUnblockUpdate","hasAnimatedSinceResize","finishAnimation","registerSharedNode","_ref2","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","target","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","_visualElement$getPro","getProps","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","_objectSpread","onPlay","onComplete","shouldReduceMotion","type","startAnimation","isLead","onExitComplete","unmount","willUpdate","remove","stack","getStack","preRender","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","getTransformTemplate","transformTemplate","shouldNotifyListeners","updateScroll","_this$options2","prevTransformTemplateValue","updateSnapshot","didUpdate","updateWasBlocked","clearMeasurements","size","mountNodeEarly","clear","resetTransformStyle","updateLayout","notifyLayoutUpdate","update","render","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","_this3","postRender","snapshot","measure","alwaysMeasureLayout","prevLayout","layoutCorrected","projectionDelta","layoutBox","phase","needsMeasurement","Boolean","layoutScroll","scroll","isRoot","offset","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","removeTransform","pageBox","measurePageBox","removeElementScroll","roundBox","measuredBox","source","box","measureViewportBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","setTargetDelta","targetDelta","setOptions","crossfade","lead","getLead","attemptToResolveRelativeTarget","_this$options3","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isShared","canSkip","_this$options4","pendingAnimation","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","hide","show","notifyAll","_this4","snapshotLatestValues","mixedValues","relativeLayout","snapshotSource","layoutSource","isSharedLayoutAnimation","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","mixTargetDelta","latest","progress","mixAxisDelta","mixBox","animationValues","_this5","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","min","max","yLength","config","initialPromotionConfig","promote","preserveFollowOpacity","shouldPreserveFollowOpacity","_a","getPrevLead","prevLead","_ref3","relegate","hasRotate","rotate","rotateX","rotateY","rotateZ","resetValues","setStaticValue","getProjectionStyles","styleProp","_b","styles","visibility","opacity","pointerEvents","transform","emptyStyles","valuesToRender","_this$projectionDelta","transformOrigin","origin","opacityExit","_scaleCorrectors$key","correct","applyTo","corrected","num","resetTree","_node$layout","measuredLayout","axis","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","searchNode","searchElement","document","element","querySelector","roundAxis","Math","round"],"sources":["C:/Users/User01/Documents/portfolio/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import { cancelSync, flushSync, sync } from '../../frameloop/index.mjs';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(elementId, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            this.isTransformDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this or any\n             * child might need recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.elementId = elementId;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            elementId && this.root.registerPotentialNode(elementId, this);\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        registerPotentialNode(elementId, node) {\n            this.potentialNodes.set(elementId, node);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = false) {\n            if (this.instance)\n                return;\n            this.isSVG =\n                instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            this.elementId && this.root.potentialNodes.delete(this.elementId);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEquals(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            this.animationProgress === 0) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        // Note: Currently only running on root node\n        didUpdate() {\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            sync.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        /**\n         *\n         */\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.isProjectionDirty = true;\n            this.root.scheduleUpdateProjection();\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        /**\n         * Frame calculations\n         */\n        resolveTargetDelta() {\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            if (!this.isProjectionDirty && !this.attemptToResolveRelativeTarget)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent && relativeParent.layout) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target) {\n                    this.relativeParent = relativeParent;\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if ((this.parent.relativeTarget ||\n                this.parent.targetDelta ||\n                this.parent.options.layoutRoot) &&\n                this.parent.layout) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        calcProjection() {\n            const { isProjectionDirty, isTransformDirty } = this;\n            this.isProjectionDirty = this.isTransformDirty = false;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            if (isProjectionDirty)\n                canSkip = false;\n            if (isShared && isTransformDirty)\n                canSkip = false;\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            const { target } = lead;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animate(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Propagate isProjectionDirty. Nodes are ordered by depth, so if the parent here\n     * is dirty we can simply pass this forward.\n     */\n    node.isProjectionDirty || (node.isProjectionDirty = Boolean(node.parent && node.parent.isProjectionDirty));\n    /**\n     * Propagate isTransformDirty.\n     */\n    node.isTransformDirty || (node.isTransformDirty = Boolean(node.parent && node.parent.isTransformDirty));\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, elementId) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    let searchNode = node.root;\n    for (let i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    const element = searchElement.querySelector(`[data-projection-id=\"${elementId}\"]`);\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}