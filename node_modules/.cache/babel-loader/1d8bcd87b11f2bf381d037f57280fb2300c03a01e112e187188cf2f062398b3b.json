{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _slicedToArray from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _excluded = [\"id\", \"closeOnSelect\", \"closeOnBlur\", \"initialFocusRef\", \"autoSelect\", \"isLazy\", \"isOpen\", \"defaultIsOpen\", \"onClose\", \"onOpen\", \"placement\", \"lazyBehavior\", \"direction\", \"computePositionOnMount\"],\n  _excluded2 = [\"onMouseEnter\", \"onMouseMove\", \"onMouseLeave\", \"onClick\", \"onFocus\", \"isDisabled\", \"isFocusable\", \"closeOnSelect\", \"type\"],\n  _excluded3 = [\"type\", \"isChecked\"],\n  _excluded4 = [\"children\", \"type\", \"value\", \"defaultValue\", \"onChange\"];\nimport { useShortcut } from \"./chunk-YSKACL7R.mjs\";\nimport { getNextItemFromSearch } from \"./chunk-BWUXSGSJ.mjs\";\n\n// src/use-menu.ts\nimport { useClickable } from \"@chakra-ui/clickable\";\nimport { createDescendantContext } from \"@chakra-ui/descendant\";\nimport { useFocusOnHide } from \"@chakra-ui/react-use-focus-effect\";\nimport { usePopper } from \"@chakra-ui/popper\";\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\";\nimport { useOutsideClick } from \"@chakra-ui/react-use-outside-click\";\nimport { useAnimationState } from \"@chakra-ui/react-use-animation-state\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { dataAttr, callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { lazyDisclosure } from \"@chakra-ui/lazy-utils\";\nimport { cloneElement, useCallback, useRef, useState, useId, useMemo, useEffect } from \"react\";\nvar _createDescendantCont = createDescendantContext(),\n  _createDescendantCont2 = _slicedToArray(_createDescendantCont, 4),\n  MenuDescendantsProvider = _createDescendantCont2[0],\n  useMenuDescendantsContext = _createDescendantCont2[1],\n  useMenuDescendants = _createDescendantCont2[2],\n  useMenuDescendant = _createDescendantCont2[3];\nvar _createContext = createContext({\n    strict: false,\n    name: \"MenuContext\"\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  MenuProvider = _createContext2[0],\n  useMenuContext = _createContext2[1];\nfunction useIds(idProp) {\n  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    prefixes[_key - 1] = arguments[_key];\n  }\n  var reactId = useId();\n  var id = idProp || reactId;\n  return useMemo(function () {\n    return prefixes.map(function (prefix) {\n      return \"\".concat(prefix, \"-\").concat(id);\n    });\n  }, [id, prefixes]);\n}\nfunction getOwnerDocument(node) {\n  var _a;\n  return (_a = node == null ? void 0 : node.ownerDocument) != null ? _a : document;\n}\nfunction isActiveElement(element) {\n  var doc = getOwnerDocument(element);\n  return doc.activeElement === element;\n}\nfunction useMenu() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var id = props.id,\n    _props$closeOnSelect = props.closeOnSelect,\n    closeOnSelect = _props$closeOnSelect === void 0 ? true : _props$closeOnSelect,\n    _props$closeOnBlur = props.closeOnBlur,\n    closeOnBlur = _props$closeOnBlur === void 0 ? true : _props$closeOnBlur,\n    initialFocusRef = props.initialFocusRef,\n    _props$autoSelect = props.autoSelect,\n    autoSelect = _props$autoSelect === void 0 ? true : _props$autoSelect,\n    isLazy = props.isLazy,\n    isOpenProp = props.isOpen,\n    defaultIsOpen = props.defaultIsOpen,\n    onCloseProp = props.onClose,\n    onOpenProp = props.onOpen,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? \"bottom-start\" : _props$placement,\n    _props$lazyBehavior = props.lazyBehavior,\n    lazyBehavior = _props$lazyBehavior === void 0 ? \"unmount\" : _props$lazyBehavior,\n    direction = props.direction,\n    _props$computePositio = props.computePositionOnMount,\n    computePositionOnMount = _props$computePositio === void 0 ? false : _props$computePositio,\n    popperProps = _objectWithoutProperties(props, _excluded);\n  var menuRef = useRef(null);\n  var buttonRef = useRef(null);\n  var descendants = useMenuDescendants();\n  var focusMenu = useCallback(function () {\n    requestAnimationFrame(function () {\n      var _a;\n      (_a = menuRef.current) == null ? void 0 : _a.focus({\n        preventScroll: false\n      });\n    });\n  }, []);\n  var focusFirstItem = useCallback(function () {\n    var id2 = setTimeout(function () {\n      var _a;\n      if (initialFocusRef) {\n        (_a = initialFocusRef.current) == null ? void 0 : _a.focus();\n      } else {\n        var first = descendants.firstEnabled();\n        if (first) setFocusedIndex(first.index);\n      }\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants, initialFocusRef]);\n  var focusLastItem = useCallback(function () {\n    var id2 = setTimeout(function () {\n      var last = descendants.lastEnabled();\n      if (last) setFocusedIndex(last.index);\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants]);\n  var onOpenInternal = useCallback(function () {\n    onOpenProp == null ? void 0 : onOpenProp();\n    if (autoSelect) {\n      focusFirstItem();\n    } else {\n      focusMenu();\n    }\n  }, [autoSelect, focusFirstItem, focusMenu, onOpenProp]);\n  var _useDisclosure = useDisclosure({\n      isOpen: isOpenProp,\n      defaultIsOpen: defaultIsOpen,\n      onClose: onCloseProp,\n      onOpen: onOpenInternal\n    }),\n    isOpen = _useDisclosure.isOpen,\n    onOpen = _useDisclosure.onOpen,\n    onClose = _useDisclosure.onClose,\n    onToggle = _useDisclosure.onToggle;\n  useOutsideClick({\n    enabled: isOpen && closeOnBlur,\n    ref: menuRef,\n    handler: function handler(event) {\n      var _a;\n      if (!((_a = buttonRef.current) == null ? void 0 : _a.contains(event.target))) {\n        onClose();\n      }\n    }\n  });\n  var popper = usePopper(_objectSpread(_objectSpread({}, popperProps), {}, {\n    enabled: isOpen || computePositionOnMount,\n    placement: placement,\n    direction: direction\n  }));\n  var _useState = useState(-1),\n    _useState2 = _slicedToArray(_useState, 2),\n    focusedIndex = _useState2[0],\n    setFocusedIndex = _useState2[1];\n  useUpdateEffect(function () {\n    if (!isOpen) {\n      setFocusedIndex(-1);\n    }\n  }, [isOpen]);\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true\n  });\n  var animationState = useAnimationState({\n    isOpen: isOpen,\n    ref: menuRef\n  });\n  var _useIds = useIds(id, \"menu-button\", \"menu-list\"),\n    _useIds2 = _slicedToArray(_useIds, 2),\n    buttonId = _useIds2[0],\n    menuId = _useIds2[1];\n  var openAndFocusMenu = useCallback(function () {\n    onOpen();\n    focusMenu();\n  }, [onOpen, focusMenu]);\n  var timeoutIds = useRef( /* @__PURE__ */new Set([]));\n  useUnmountEffect(function () {\n    timeoutIds.current.forEach(function (id2) {\n      return clearTimeout(id2);\n    });\n    timeoutIds.current.clear();\n  });\n  var openAndFocusFirstItem = useCallback(function () {\n    onOpen();\n    focusFirstItem();\n  }, [focusFirstItem, onOpen]);\n  var openAndFocusLastItem = useCallback(function () {\n    onOpen();\n    focusLastItem();\n  }, [onOpen, focusLastItem]);\n  var refocus = useCallback(function () {\n    var _a, _b;\n    var doc = getOwnerDocument(menuRef.current);\n    var hasFocusWithin = (_a = menuRef.current) == null ? void 0 : _a.contains(doc.activeElement);\n    var shouldRefocus = isOpen && !hasFocusWithin;\n    if (!shouldRefocus) return;\n    var node = (_b = descendants.item(focusedIndex)) == null ? void 0 : _b.node;\n    node == null ? void 0 : node.focus();\n  }, [isOpen, focusedIndex, descendants]);\n  var rafId = useRef(null);\n  return {\n    openAndFocusMenu: openAndFocusMenu,\n    openAndFocusFirstItem: openAndFocusFirstItem,\n    openAndFocusLastItem: openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    unstable__animationState: animationState,\n    descendants: descendants,\n    popper: popper,\n    buttonId: buttonId,\n    menuId: menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen: isOpen,\n    onToggle: onToggle,\n    onOpen: onOpen,\n    onClose: onClose,\n    menuRef: menuRef,\n    buttonRef: buttonRef,\n    focusedIndex: focusedIndex,\n    closeOnSelect: closeOnSelect,\n    closeOnBlur: closeOnBlur,\n    autoSelect: autoSelect,\n    setFocusedIndex: setFocusedIndex,\n    isLazy: isLazy,\n    lazyBehavior: lazyBehavior,\n    initialFocusRef: initialFocusRef,\n    rafId: rafId\n  };\n}\nfunction useMenuButton() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var externalRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var menu = useMenuContext();\n  var onToggle = menu.onToggle,\n    popper = menu.popper,\n    openAndFocusFirstItem = menu.openAndFocusFirstItem,\n    openAndFocusLastItem = menu.openAndFocusLastItem;\n  var onKeyDown = useCallback(function (event) {\n    var eventKey = event.key;\n    var keyMap = {\n      Enter: openAndFocusFirstItem,\n      ArrowDown: openAndFocusFirstItem,\n      ArrowUp: openAndFocusLastItem\n    };\n    var action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n    }\n  }, [openAndFocusFirstItem, openAndFocusLastItem]);\n  return _objectSpread(_objectSpread({}, props), {}, {\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\",\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onToggle),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\nfunction isTargetMenuItem(target) {\n  var _a;\n  return isHTMLElement(target) && !!((_a = target == null ? void 0 : target.getAttribute(\"role\")) == null ? void 0 : _a.startsWith(\"menuitem\"));\n}\nfunction useMenuList() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var menu = useMenuContext();\n  if (!menu) {\n    throw new Error(\"useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>\");\n  }\n  var focusedIndex = menu.focusedIndex,\n    setFocusedIndex = menu.setFocusedIndex,\n    menuRef = menu.menuRef,\n    isOpen = menu.isOpen,\n    onClose = menu.onClose,\n    menuId = menu.menuId,\n    isLazy = menu.isLazy,\n    lazyBehavior = menu.lazyBehavior,\n    animated = menu.unstable__animationState;\n  var descendants = useMenuDescendantsContext();\n  var createTypeaheadHandler = useShortcut({\n    preventDefault: function preventDefault(event) {\n      return event.key !== \" \" && isTargetMenuItem(event.target);\n    }\n  });\n  var onKeyDown = useCallback(function (event) {\n    if (!event.currentTarget.contains(event.target)) return;\n    var eventKey = event.key;\n    var keyMap = {\n      Tab: function Tab(event2) {\n        return event2.preventDefault();\n      },\n      Escape: onClose,\n      ArrowDown: function ArrowDown() {\n        var next = descendants.nextEnabled(focusedIndex);\n        if (next) setFocusedIndex(next.index);\n      },\n      ArrowUp: function ArrowUp() {\n        var prev = descendants.prevEnabled(focusedIndex);\n        if (prev) setFocusedIndex(prev.index);\n      }\n    };\n    var fn = keyMap[eventKey];\n    if (fn) {\n      event.preventDefault();\n      fn(event);\n      return;\n    }\n    var onTypeahead = createTypeaheadHandler(function (character) {\n      var nextItem = getNextItemFromSearch(descendants.values(), character, function (item) {\n        var _a, _b;\n        return (_b = (_a = item == null ? void 0 : item.node) == null ? void 0 : _a.textContent) != null ? _b : \"\";\n      }, descendants.item(focusedIndex));\n      if (nextItem) {\n        var index = descendants.indexOf(nextItem.node);\n        setFocusedIndex(index);\n      }\n    });\n    if (isTargetMenuItem(event.target)) {\n      onTypeahead(event);\n    }\n  }, [descendants, focusedIndex, createTypeaheadHandler, onClose, setFocusedIndex]);\n  var hasBeenOpened = useRef(false);\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n  var shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present\n  });\n  return _objectSpread(_objectSpread({}, props), {}, {\n    ref: mergeRefs(menuRef, ref),\n    children: shouldRenderChildren ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: _objectSpread(_objectSpread({}, props.style), {}, {\n      transformOrigin: \"var(--popper-transform-origin)\"\n    }),\n    \"aria-orientation\": \"vertical\",\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\nfunction useMenuPositioner() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _useMenuContext = useMenuContext(),\n    popper = _useMenuContext.popper,\n    isOpen = _useMenuContext.isOpen;\n  return popper.getPopperProps(_objectSpread(_objectSpread({}, props), {}, {\n    style: _objectSpread({\n      visibility: isOpen ? \"visible\" : \"hidden\"\n    }, props.style)\n  }));\n}\nfunction useMenuItem() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var externalRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var onMouseEnterProp = props.onMouseEnter,\n    onMouseMoveProp = props.onMouseMove,\n    onMouseLeaveProp = props.onMouseLeave,\n    onClickProp = props.onClick,\n    onFocusProp = props.onFocus,\n    isDisabled = props.isDisabled,\n    isFocusable = props.isFocusable,\n    closeOnSelect = props.closeOnSelect,\n    typeProp = props.type,\n    htmlProps = _objectWithoutProperties(props, _excluded2);\n  var menu = useMenuContext();\n  var setFocusedIndex = menu.setFocusedIndex,\n    focusedIndex = menu.focusedIndex,\n    menuCloseOnSelect = menu.closeOnSelect,\n    onClose = menu.onClose,\n    menuRef = menu.menuRef,\n    isOpen = menu.isOpen,\n    menuId = menu.menuId,\n    rafId = menu.rafId;\n  var ref = useRef(null);\n  var id = \"\".concat(menuId, \"-menuitem-\").concat(useId());\n  var _useMenuDescendant = useMenuDescendant({\n      disabled: isDisabled && !isFocusable\n    }),\n    index = _useMenuDescendant.index,\n    register = _useMenuDescendant.register;\n  var onMouseEnter = useCallback(function (event) {\n    onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(index);\n  }, [setFocusedIndex, index, isDisabled, onMouseEnterProp]);\n  var onMouseMove = useCallback(function (event) {\n    onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);\n    if (ref.current && !isActiveElement(ref.current)) {\n      onMouseEnter(event);\n    }\n  }, [onMouseEnter, onMouseMoveProp]);\n  var onMouseLeave = useCallback(function (event) {\n    onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(-1);\n  }, [setFocusedIndex, isDisabled, onMouseLeaveProp]);\n  var onClick = useCallback(function (event) {\n    onClickProp == null ? void 0 : onClickProp(event);\n    if (!isTargetMenuItem(event.currentTarget)) return;\n    if (closeOnSelect != null ? closeOnSelect : menuCloseOnSelect) {\n      onClose();\n    }\n  }, [onClose, onClickProp, menuCloseOnSelect, closeOnSelect]);\n  var onFocus = useCallback(function (event) {\n    onFocusProp == null ? void 0 : onFocusProp(event);\n    setFocusedIndex(index);\n  }, [setFocusedIndex, onFocusProp, index]);\n  var isFocused = index === focusedIndex;\n  var trulyDisabled = isDisabled && !isFocusable;\n  useUpdateEffect(function () {\n    if (!isOpen) return;\n    if (isFocused && !trulyDisabled && ref.current) {\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current);\n      }\n      rafId.current = requestAnimationFrame(function () {\n        var _a;\n        (_a = ref.current) == null ? void 0 : _a.focus();\n        rafId.current = null;\n      });\n    } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n      menuRef.current.focus({\n        preventScroll: true\n      });\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen]);\n  var clickableProps = useClickable({\n    onClick: onClick,\n    onFocus: onFocus,\n    onMouseEnter: onMouseEnter,\n    onMouseMove: onMouseMove,\n    onMouseLeave: onMouseLeave,\n    ref: mergeRefs(register, ref, externalRef),\n    isDisabled: isDisabled,\n    isFocusable: isFocusable\n  });\n  return _objectSpread(_objectSpread(_objectSpread({}, htmlProps), clickableProps), {}, {\n    type: typeProp != null ? typeProp : clickableProps.type,\n    id: id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1\n  });\n}\nfunction useMenuOption() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var _props$type = props.type,\n    type = _props$type === void 0 ? \"radio\" : _props$type,\n    isChecked = props.isChecked,\n    rest = _objectWithoutProperties(props, _excluded3);\n  var ownProps = useMenuItem(rest, ref);\n  return _objectSpread(_objectSpread({}, ownProps), {}, {\n    role: \"menuitem\".concat(type),\n    \"aria-checked\": isChecked\n  });\n}\nfunction useMenuOptionGroup() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var children = props.children,\n    _props$type2 = props.type,\n    type = _props$type2 === void 0 ? \"radio\" : _props$type2,\n    valueProp = props.value,\n    defaultValue = props.defaultValue,\n    onChangeProp = props.onChange,\n    htmlProps = _objectWithoutProperties(props, _excluded4);\n  var isRadio = type === \"radio\";\n  var fallback = isRadio ? \"\" : [];\n  var _useControllableState = useControllableState({\n      defaultValue: defaultValue != null ? defaultValue : fallback,\n      value: valueProp,\n      onChange: onChangeProp\n    }),\n    _useControllableState2 = _slicedToArray(_useControllableState, 2),\n    value = _useControllableState2[0],\n    setValue = _useControllableState2[1];\n  var onChange = useCallback(function (selectedValue) {\n    if (type === \"radio\" && typeof value === \"string\") {\n      setValue(selectedValue);\n    }\n    if (type === \"checkbox\" && Array.isArray(value)) {\n      var nextValue = value.includes(selectedValue) ? value.filter(function (item) {\n        return item !== selectedValue;\n      }) : value.concat(selectedValue);\n      setValue(nextValue);\n    }\n  }, [value, setValue, type]);\n  var validChildren = getValidChildren(children);\n  var clones = validChildren.map(function (child) {\n    if (child.type.id !== \"MenuItemOption\") return child;\n    var onClick = function onClick(event) {\n      var _a, _b;\n      onChange(child.props.value);\n      (_b = (_a = child.props).onClick) == null ? void 0 : _b.call(_a, event);\n    };\n    var isChecked = type === \"radio\" ? child.props.value === value : value.includes(child.props.value);\n    return cloneElement(child, {\n      type: type,\n      onClick: onClick,\n      isChecked: isChecked\n    });\n  });\n  return _objectSpread(_objectSpread({}, htmlProps), {}, {\n    children: clones\n  });\n}\nfunction useMenuState() {\n  var _useMenuContext2 = useMenuContext(),\n    isOpen = _useMenuContext2.isOpen,\n    onClose = _useMenuContext2.onClose;\n  return {\n    isOpen: isOpen,\n    onClose: onClose\n  };\n}\nfunction isHTMLElement(el) {\n  var _a;\n  if (!isElement(el)) return false;\n  var win = (_a = el.ownerDocument.defaultView) != null ? _a : window;\n  return el instanceof win.HTMLElement;\n}\nfunction isElement(el) {\n  return el != null && typeof el == \"object\" && \"nodeType\" in el && el.nodeType === Node.ELEMENT_NODE;\n}\nfunction useUnmountEffect(fn) {\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return useEffect(function () {\n    return function () {\n      return fn();\n    };\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  deps);\n}\nexport { MenuDescendantsProvider, useMenuDescendantsContext, useMenuDescendants, useMenuDescendant, MenuProvider, useMenuContext, useMenu, useMenuButton, useMenuList, useMenuPositioner, useMenuItem, useMenuOption, useMenuOptionGroup, useMenuState };","map":{"version":3,"mappings":"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","names":["useClickable","createDescendantContext","useFocusOnHide","usePopper","useDisclosure","useOutsideClick","useAnimationState","createContext","getValidChildren","useControllableState","useUpdateEffect","mergeRefs","dataAttr","callAllHandlers","lazyDisclosure","cloneElement","useCallback","useRef","useState","useId","useMemo","useEffect","MenuDescendantsProvider","useMenuDescendantsContext","useMenuDescendants","useMenuDescendant","strict","name","MenuProvider","useMenuContext","useIds","idProp","prefixes","reactId","id","map","prefix","getOwnerDocument","node","_a","ownerDocument","document","isActiveElement","element","doc","activeElement","useMenu","props","closeOnSelect","closeOnBlur","initialFocusRef","autoSelect","isLazy","isOpenProp","isOpen","defaultIsOpen","onCloseProp","onClose","onOpenProp","onOpen","placement","lazyBehavior","direction","computePositionOnMount","popperProps","menuRef","buttonRef","descendants","focusMenu","requestAnimationFrame","current","focus","preventScroll","focusFirstItem","setTimeout","first","firstEnabled","setFocusedIndex","index","timeoutIds","add","focusLastItem","last","lastEnabled","onOpenInternal","onToggle","enabled","ref","handler","event","contains","target","popper","focusedIndex","focusRef","visible","shouldFocus","animationState","buttonId","menuId","openAndFocusMenu","Set","useUnmountEffect","forEach","clearTimeout","clear","openAndFocusFirstItem","openAndFocusLastItem","refocus","hasFocusWithin","shouldRefocus","_b","item","rafId","onTransitionEnd","unstable__animationState","forceUpdate","orientation","useMenuButton","externalRef","menu","onKeyDown","eventKey","key","keyMap","Enter","ArrowDown","ArrowUp","action","preventDefault","stopPropagation","referenceRef","onClick","isTargetMenuItem","isHTMLElement","getAttribute","startsWith","useMenuList","Error","animated","createTypeaheadHandler","useShortcut","currentTarget","Tab","Escape","next","nextEnabled","prev","prevEnabled","fn","onTypeahead","character","nextItem","getNextItemFromSearch","values","textContent","indexOf","hasBeenOpened","shouldRenderChildren","wasSelected","mode","isSelected","present","children","tabIndex","role","style","transformOrigin","useMenuPositioner","getPopperProps","visibility","useMenuItem","onMouseEnterProp","onMouseEnter","onMouseMoveProp","onMouseMove","onMouseLeaveProp","onMouseLeave","onClickProp","onFocusProp","onFocus","isDisabled","isFocusable","typeProp","type","htmlProps","menuCloseOnSelect","disabled","register","isFocused","trulyDisabled","cancelAnimationFrame","clickableProps","useMenuOption","isChecked","rest","ownProps","useMenuOptionGroup","valueProp","value","defaultValue","onChangeProp","onChange","isRadio","fallback","setValue","selectedValue","Array","isArray","nextValue","includes","filter","concat","validChildren","clones","child","useMenuState","el","isElement","win","defaultView","window","HTMLElement","nodeType","Node","ELEMENT_NODE","deps"],"sources":["D:\\portfolio\\node_modules\\@chakra-ui\\menu\\src\\use-menu.ts"],"sourcesContent":["import { useClickable } from \"@chakra-ui/clickable\"\nimport { createDescendantContext } from \"@chakra-ui/descendant\"\nimport { useFocusOnHide } from \"@chakra-ui/react-use-focus-effect\"\nimport { usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport {\n  useDisclosure,\n  UseDisclosureProps,\n} from \"@chakra-ui/react-use-disclosure\"\nimport { useOutsideClick } from \"@chakra-ui/react-use-outside-click\"\nimport { useAnimationState } from \"@chakra-ui/react-use-animation-state\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { dataAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { lazyDisclosure, LazyMode } from \"@chakra-ui/lazy-utils\"\n\nimport React, {\n  cloneElement,\n  useCallback,\n  useRef,\n  useState,\n  useId,\n  useMemo,\n  useEffect,\n} from \"react\"\nimport { useShortcut } from \"./use-shortcut\"\nimport { getNextItemFromSearch } from \"./get-next-item-from-search\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  MenuDescendantsProvider,\n  useMenuDescendantsContext,\n  useMenuDescendants,\n  useMenuDescendant,\n] = createDescendantContext<HTMLElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track menu state and logic\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [MenuProvider, useMenuContext] = createContext<\n  Omit<UseMenuReturn, \"descendants\">\n>({\n  strict: false,\n  name: \"MenuContext\",\n})\n\n/* -------------------------------------------------------------------------------------------------\n * useMenu hook\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuProps\n  extends Omit<UsePopperProps, \"enabled\">,\n    UseDisclosureProps {\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: React.RefObject<{ focus(): void }>\n  /**\n   * If `true`, the menu will close when a menu item is\n   * clicked\n   *\n   * @default true\n   */\n  closeOnSelect?: boolean\n  /**\n   * If `true`, the menu will close when you click outside\n   * the menu list\n   *\n   * @default true\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the first enabled menu item will receive focus and be selected\n   * when the menu opens.\n   *\n   * @default true\n   */\n  autoSelect?: boolean\n  /**\n   * Performance 🚀:\n   * If `true`, the MenuItem rendering will be deferred\n   * until the menu is open.\n   *\n   * @default false\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of menu's content when not visible.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The menu's content is always unmounted when not open.\n   * - \"keepMounted\": The menu's content initially unmounted,\n   * but stays mounted when menu is open.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyMode\n  /**\n   * If `rtl`, proper placement positions will be flipped i.e. 'top-right' will\n   * become 'top-left' and vice-verse\n   */\n  direction?: \"ltr\" | \"rtl\"\n  /*\n   * If `true`, the menu will be positioned when it mounts\n   * (even if it's not open).\n   *\n   * Note 🚨: We don't recommend using this in a menu/popover intensive UI or page\n   * as it might affect scrolling performance.\n   *\n   * @default false\n   */\n  computePositionOnMount?: boolean\n}\n\nfunction useIds(idProp?: string, ...prefixes: string[]) {\n  const reactId = useId()\n  const id = idProp || reactId\n  return useMemo(() => {\n    return prefixes.map((prefix) => `${prefix}-${id}`)\n  }, [id, prefixes])\n}\n\nfunction getOwnerDocument(node?: Element | null): Document {\n  return node?.ownerDocument ?? document\n}\n\nfunction isActiveElement(element: HTMLElement) {\n  const doc = getOwnerDocument(element)\n  return doc.activeElement === (element as HTMLElement)\n}\n\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate its return value to all children\n */\nexport function useMenu(props: UseMenuProps = {}) {\n  const {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    initialFocusRef,\n    autoSelect = true,\n    isLazy,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    placement = \"bottom-start\",\n    lazyBehavior = \"unmount\",\n    direction,\n    computePositionOnMount = false,\n    ...popperProps\n  } = props\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n  const menuRef = useRef<HTMLDivElement>(null)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n\n  /**\n   * Context to register all menu item nodes\n   */\n  const descendants = useMenuDescendants()\n\n  const focusMenu = useCallback(() => {\n    requestAnimationFrame(() => {\n      menuRef.current?.focus({ preventScroll: false })\n    })\n  }, [])\n\n  const focusFirstItem = useCallback(() => {\n    const id = setTimeout(() => {\n      if (initialFocusRef) {\n        initialFocusRef.current?.focus()\n      } else {\n        const first = descendants.firstEnabled()\n        if (first) setFocusedIndex(first.index)\n      }\n    })\n    timeoutIds.current.add(id)\n  }, [descendants, initialFocusRef])\n\n  const focusLastItem = useCallback(() => {\n    const id = setTimeout(() => {\n      const last = descendants.lastEnabled()\n      if (last) setFocusedIndex(last.index)\n    })\n    timeoutIds.current.add(id)\n  }, [descendants])\n\n  const onOpenInternal = useCallback(() => {\n    onOpenProp?.()\n    if (autoSelect) {\n      focusFirstItem()\n    } else {\n      focusMenu()\n    }\n  }, [autoSelect, focusFirstItem, focusMenu, onOpenProp])\n\n  const { isOpen, onOpen, onClose, onToggle } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenInternal,\n  })\n\n  useOutsideClick({\n    enabled: isOpen && closeOnBlur,\n    ref: menuRef,\n    handler: (event) => {\n      if (!buttonRef.current?.contains(event.target as HTMLElement)) {\n        onClose()\n      }\n    },\n  })\n\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n  const popper: any = usePopper({\n    ...popperProps,\n    enabled: isOpen || computePositionOnMount,\n    placement,\n    direction,\n  })\n\n  const [focusedIndex, setFocusedIndex] = useState(-1)\n\n  /**\n   * Focus the button when we close the menu\n   */\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1)\n    }\n  }, [isOpen])\n\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true,\n  })\n\n  const animationState = useAnimationState({ isOpen, ref: menuRef })\n\n  /**\n   * Generate unique ids for menu's list and button\n   */\n  const [buttonId, menuId] = useIds(id, `menu-button`, `menu-list`)\n\n  const openAndFocusMenu = useCallback(() => {\n    onOpen()\n    focusMenu()\n  }, [onOpen, focusMenu])\n\n  const timeoutIds = useRef<Set<any>>(new Set([]))\n\n  useUnmountEffect(() => {\n    timeoutIds.current.forEach((id) => clearTimeout(id))\n    timeoutIds.current.clear()\n  })\n\n  const openAndFocusFirstItem = useCallback(() => {\n    onOpen()\n    focusFirstItem()\n  }, [focusFirstItem, onOpen])\n\n  const openAndFocusLastItem = useCallback(() => {\n    onOpen()\n    focusLastItem()\n  }, [onOpen, focusLastItem])\n\n  const refocus = useCallback(() => {\n    const doc = getOwnerDocument(menuRef.current)\n    const hasFocusWithin = menuRef.current?.contains(doc.activeElement)\n    const shouldRefocus = isOpen && !hasFocusWithin\n\n    if (!shouldRefocus) return\n\n    const node = descendants.item(focusedIndex)?.node\n    node?.focus()\n  }, [isOpen, focusedIndex, descendants])\n\n  /**\n   * Track the animation frame which is scheduled to focus\n   * a menu item, so it can be cancelled if another item\n   * is focused before the animation executes. This prevents\n   * infinite rerenders.\n   */\n  const rafId = useRef<number | null>(null)\n\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    unstable__animationState: animationState,\n    descendants,\n    popper,\n    buttonId,\n    menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy,\n    lazyBehavior,\n    initialFocusRef,\n    rafId,\n  }\n}\n\nexport interface UseMenuReturn extends ReturnType<typeof useMenu> {}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuButton hook\n * -----------------------------------------------------------------------------------------------*/\nexport interface UseMenuButtonProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\n/**\n * React Hook to manage a menu button.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\nexport function useMenuButton(\n  props: UseMenuButtonProps = {},\n  externalRef: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  const { onToggle, popper, openAndFocusFirstItem, openAndFocusLastItem } = menu\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = event.key\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        Enter: openAndFocusFirstItem,\n        ArrowDown: openAndFocusFirstItem,\n        ArrowUp: openAndFocusLastItem,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n      }\n    },\n    [openAndFocusFirstItem, openAndFocusLastItem],\n  )\n\n  return {\n    ...props,\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\" as React.AriaAttributes[\"aria-haspopup\"],\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onToggle),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nfunction isTargetMenuItem(target: EventTarget | null) {\n  // this will catch `menuitem`, `menuitemradio`, `menuitemcheckbox`\n  return (\n    isHTMLElement(target) &&\n    !!target?.getAttribute(\"role\")?.startsWith(\"menuitem\")\n  )\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuList\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuListProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\n/**\n * React Hook to manage a menu list.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\nexport function useMenuList(\n  props: UseMenuListProps = {},\n  ref: React.Ref<any> = null,\n): React.HTMLAttributes<HTMLElement> & React.RefAttributes<HTMLElement> {\n  const menu = useMenuContext()\n\n  if (!menu) {\n    throw new Error(\n      `useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>`,\n    )\n  }\n\n  const {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    isLazy,\n    lazyBehavior,\n    unstable__animationState: animated,\n  } = menu\n\n  const descendants = useMenuDescendantsContext()\n\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n  const createTypeaheadHandler = useShortcut({\n    preventDefault: (event) =>\n      event.key !== \" \" && isTargetMenuItem(event.target),\n  })\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      // ignore events bubbles from portal children\n      if (!event.currentTarget.contains(event.target as Element)) return\n\n      const eventKey = event.key\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        Tab: (event) => event.preventDefault(),\n        Escape: onClose,\n        ArrowDown: () => {\n          const next = descendants.nextEnabled(focusedIndex)\n          if (next) setFocusedIndex(next.index)\n        },\n        ArrowUp: () => {\n          const prev = descendants.prevEnabled(focusedIndex)\n          if (prev) setFocusedIndex(prev.index)\n        },\n      }\n\n      const fn = keyMap[eventKey]\n\n      if (fn) {\n        event.preventDefault()\n        fn(event)\n        return\n      }\n\n      /**\n       * Typeahead: Based on current character pressed,\n       * find the next item to be selected\n       */\n      const onTypeahead = createTypeaheadHandler((character) => {\n        const nextItem = getNextItemFromSearch(\n          descendants.values(),\n          character,\n          (item) => item?.node?.textContent ?? \"\",\n          descendants.item(focusedIndex),\n        )\n        if (nextItem) {\n          const index = descendants.indexOf(nextItem.node)\n          setFocusedIndex(index)\n        }\n      })\n\n      if (isTargetMenuItem(event.target)) {\n        onTypeahead(event)\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      createTypeaheadHandler,\n      onClose,\n      setFocusedIndex,\n    ],\n  )\n\n  const hasBeenOpened = useRef(false)\n  if (isOpen) {\n    hasBeenOpened.current = true\n  }\n\n  const shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present,\n  })\n\n  return {\n    ...props,\n    ref: mergeRefs(menuRef, ref),\n    children: shouldRenderChildren ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: {\n      ...props.style,\n      transformOrigin: \"var(--popper-transform-origin)\",\n    },\n    \"aria-orientation\": \"vertical\" as React.AriaAttributes[\"aria-orientation\"],\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuPosition: Composes usePopper to position the menu\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuPositioner(props: any = {}) {\n  const { popper, isOpen } = useMenuContext()\n  return popper.getPopperProps({\n    ...props,\n    style: {\n      visibility: isOpen ? \"visible\" : \"hidden\",\n      ...props.style,\n    },\n  })\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuItem: Hook for each menu item within the menu list.\n   We also use it in `useMenuItemOption`\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuItemProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\" | \"disabled\"> {\n  /**\n   * If `true`, the menuitem will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and the menuitem is disabled, it'll\n   * remain keyboard-focusable\n   */\n  isFocusable?: boolean\n  /**\n   * Overrides the parent menu's `closeOnSelect` prop.\n   */\n  closeOnSelect?: boolean\n  /**\n   * The type of the menuitem.\n   */\n  type?: React.ButtonHTMLAttributes<HTMLButtonElement>[\"type\"]\n}\n\nexport function useMenuItem(\n  props: UseMenuItemProps = {},\n  externalRef: React.Ref<any> = null,\n) {\n  const {\n    onMouseEnter: onMouseEnterProp,\n    onMouseMove: onMouseMoveProp,\n    onMouseLeave: onMouseLeaveProp,\n    onClick: onClickProp,\n    onFocus: onFocusProp,\n    isDisabled,\n    isFocusable,\n    closeOnSelect,\n    type: typeProp,\n    ...htmlProps\n  } = props\n\n  const menu = useMenuContext()\n\n  const {\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect: menuCloseOnSelect,\n    onClose,\n    menuRef,\n    isOpen,\n    menuId,\n    rafId,\n  } = menu\n\n  const ref = useRef<HTMLDivElement>(null)\n  const id = `${menuId}-menuitem-${useId()}`\n\n  /**\n   * Register the menuitem's node into the domContext\n   */\n  const { index, register } = useMenuDescendant({\n    disabled: isDisabled && !isFocusable,\n  })\n\n  const onMouseEnter = useCallback(\n    (event: any) => {\n      onMouseEnterProp?.(event)\n      if (isDisabled) return\n      setFocusedIndex(index)\n    },\n    [setFocusedIndex, index, isDisabled, onMouseEnterProp],\n  )\n\n  const onMouseMove = useCallback(\n    (event: any) => {\n      onMouseMoveProp?.(event)\n      if (ref.current && !isActiveElement(ref.current)) {\n        onMouseEnter(event)\n      }\n    },\n    [onMouseEnter, onMouseMoveProp],\n  )\n\n  const onMouseLeave = useCallback(\n    (event: any) => {\n      onMouseLeaveProp?.(event)\n      if (isDisabled) return\n      setFocusedIndex(-1)\n    },\n    [setFocusedIndex, isDisabled, onMouseLeaveProp],\n  )\n\n  const onClick = useCallback(\n    (event: React.MouseEvent) => {\n      onClickProp?.(event)\n      if (!isTargetMenuItem(event.currentTarget)) return\n      /**\n       * Close menu and parent menus, allowing the MenuItem\n       * to override its parent menu's `closeOnSelect` prop.\n       */\n      if (closeOnSelect ?? menuCloseOnSelect) {\n        onClose()\n      }\n    },\n    [onClose, onClickProp, menuCloseOnSelect, closeOnSelect],\n  )\n\n  const onFocus = useCallback(\n    (event: React.FocusEvent) => {\n      onFocusProp?.(event)\n      setFocusedIndex(index)\n    },\n    [setFocusedIndex, onFocusProp, index],\n  )\n\n  const isFocused = index === focusedIndex\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  useUpdateEffect(() => {\n    if (!isOpen) return\n    if (isFocused && !trulyDisabled && ref.current) {\n      // Cancel any pending animations\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current)\n      }\n      rafId.current = requestAnimationFrame(() => {\n        ref.current?.focus()\n        rafId.current = null\n      })\n    } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n      menuRef.current.focus({ preventScroll: true })\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen])\n\n  const clickableProps = useClickable({\n    onClick,\n    onFocus,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(register, ref, externalRef),\n    isDisabled,\n    isFocusable,\n  })\n\n  return {\n    ...htmlProps,\n    ...clickableProps,\n    type: typeProp ?? (clickableProps as any).type,\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1,\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuOption: Composes useMenuItem to provide a selectable/checkable menu item\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuOptionOptions {\n  value?: string\n  isChecked?: boolean\n  type?: \"radio\" | \"checkbox\"\n  children?: React.ReactNode\n}\n\nexport interface UseMenuOptionProps\n  extends Omit<UseMenuItemProps, \"type\">,\n    UseMenuOptionOptions {}\n\nexport function useMenuOption(\n  props: UseMenuOptionProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const { type = \"radio\", isChecked, ...rest } = props\n  const ownProps = useMenuItem(rest, ref)\n  return {\n    ...ownProps,\n    role: `menuitem${type}`,\n    \"aria-checked\": isChecked as React.AriaAttributes[\"aria-checked\"],\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuOptionGroup: Manages the state of multiple selectable menuitem or menu option\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuOptionGroupProps {\n  value?: string | string[]\n  defaultValue?: string | string[]\n  type?: \"radio\" | \"checkbox\"\n  onChange?: (value: string | string[]) => void\n  children?: React.ReactNode\n}\n\nexport function useMenuOptionGroup(props: UseMenuOptionGroupProps = {}) {\n  const {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp,\n    ...htmlProps\n  } = props\n\n  const isRadio = type === \"radio\"\n\n  const fallback = isRadio ? \"\" : []\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue ?? fallback,\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  const onChange = useCallback(\n    (selectedValue: string) => {\n      if (type === \"radio\" && typeof value === \"string\") {\n        setValue(selectedValue)\n      }\n\n      if (type === \"checkbox\" && Array.isArray(value)) {\n        const nextValue = value.includes(selectedValue)\n          ? value.filter((item) => item !== selectedValue)\n          : value.concat(selectedValue)\n\n        setValue(nextValue)\n      }\n    },\n    [value, setValue, type],\n  )\n\n  const validChildren = getValidChildren(children)\n\n  const clones = validChildren.map((child) => {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if ((child.type as any).id !== \"MenuItemOption\") return child\n\n    const onClick = (event: MouseEvent) => {\n      onChange(child.props.value)\n      child.props.onClick?.(event)\n    }\n\n    const isChecked =\n      type === \"radio\"\n        ? child.props.value === value\n        : value.includes(child.props.value)\n\n    return cloneElement(child, {\n      type,\n      onClick,\n      isChecked,\n    })\n  })\n\n  return {\n    ...htmlProps,\n    children: clones,\n  }\n}\n\nexport function useMenuState() {\n  const { isOpen, onClose } = useMenuContext()\n  return { isOpen, onClose }\n}\n\nfunction isHTMLElement(el: any): el is HTMLElement {\n  if (!isElement(el)) return false\n  const win = el.ownerDocument.defaultView ?? window\n  return el instanceof win.HTMLElement\n}\n\nfunction isElement(el: any): el is Element {\n  return (\n    el != null &&\n    typeof el == \"object\" &&\n    \"nodeType\" in el &&\n    el.nodeType === Node.ELEMENT_NODE\n  )\n}\n\nfunction useUnmountEffect(fn: () => void, deps: any[] = []) {\n  return useEffect(\n    () => () => fn(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    deps,\n  )\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}