{"ast":null,"code":"'use client';\n\n// src/use-editable.ts\nimport _objectSpread from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"onChange\", \"onCancel\", \"onSubmit\", \"onBlur\", \"value\", \"isDisabled\", \"defaultValue\", \"startWithEditView\", \"isPreviewFocusable\", \"submitOnBlur\", \"selectAllOnFocus\", \"placeholder\", \"onEdit\", \"finalFocusRef\"];\nimport { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\";\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nfunction contains(parent, child) {\n  if (!parent) return false;\n  return parent === child || parent.contains(child);\n}\nfunction useEditable() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var onChangeProp = props.onChange,\n    onCancelProp = props.onCancel,\n    onSubmitProp = props.onSubmit,\n    onBlurProp = props.onBlur,\n    valueProp = props.value,\n    isDisabled = props.isDisabled,\n    defaultValue = props.defaultValue,\n    startWithEditView = props.startWithEditView,\n    _props$isPreviewFocus = props.isPreviewFocusable,\n    isPreviewFocusable = _props$isPreviewFocus === void 0 ? true : _props$isPreviewFocus,\n    _props$submitOnBlur = props.submitOnBlur,\n    submitOnBlur = _props$submitOnBlur === void 0 ? true : _props$submitOnBlur,\n    _props$selectAllOnFoc = props.selectAllOnFocus,\n    selectAllOnFocus = _props$selectAllOnFoc === void 0 ? true : _props$selectAllOnFoc,\n    placeholder = props.placeholder,\n    onEditCallback = props.onEdit,\n    finalFocusRef = props.finalFocusRef,\n    htmlProps = _objectWithoutProperties(props, _excluded);\n  var onEditProp = useCallbackRef(onEditCallback);\n  var defaultIsEditing = Boolean(startWithEditView && !isDisabled);\n  var _useState = useState(defaultIsEditing),\n    _useState2 = _slicedToArray(_useState, 2),\n    isEditing = _useState2[0],\n    setIsEditing = _useState2[1];\n  var _useControllableState = useControllableState({\n      defaultValue: defaultValue || \"\",\n      value: valueProp,\n      onChange: onChangeProp\n    }),\n    _useControllableState2 = _slicedToArray(_useControllableState, 2),\n    value = _useControllableState2[0],\n    setValue = _useControllableState2[1];\n  var _useState3 = useState(value),\n    _useState4 = _slicedToArray(_useState3, 2),\n    prevValue = _useState4[0],\n    setPrevValue = _useState4[1];\n  var inputRef = useRef(null);\n  var previewRef = useRef(null);\n  var editButtonRef = useRef(null);\n  var cancelButtonRef = useRef(null);\n  var submitButtonRef = useRef(null);\n  useFocusOnPointerDown({\n    ref: inputRef,\n    enabled: isEditing,\n    elements: [cancelButtonRef, submitButtonRef]\n  });\n  var isInteractive = !isEditing && !isDisabled;\n  useSafeLayoutEffect(function () {\n    var _a, _b;\n    if (isEditing) {\n      (_a = inputRef.current) == null ? void 0 : _a.focus();\n      if (selectAllOnFocus) (_b = inputRef.current) == null ? void 0 : _b.select();\n    }\n  }, []);\n  useUpdateEffect(function () {\n    var _a, _b, _c, _d;\n    if (!isEditing) {\n      if (finalFocusRef) {\n        (_a = finalFocusRef.current) == null ? void 0 : _a.focus();\n      } else {\n        (_b = editButtonRef.current) == null ? void 0 : _b.focus();\n      }\n      return;\n    }\n    (_c = inputRef.current) == null ? void 0 : _c.focus();\n    if (selectAllOnFocus) {\n      (_d = inputRef.current) == null ? void 0 : _d.select();\n    }\n    onEditProp == null ? void 0 : onEditProp();\n  }, [isEditing, onEditProp, selectAllOnFocus]);\n  var onEdit = useCallback(function () {\n    if (isInteractive) {\n      setIsEditing(true);\n    }\n  }, [isInteractive]);\n  var onUpdatePrevValue = useCallback(function () {\n    setPrevValue(value);\n  }, [value]);\n  var onCancel = useCallback(function () {\n    setIsEditing(false);\n    setValue(prevValue);\n    onCancelProp == null ? void 0 : onCancelProp(prevValue);\n    onBlurProp == null ? void 0 : onBlurProp(prevValue);\n  }, [onCancelProp, onBlurProp, setValue, prevValue]);\n  var onSubmit = useCallback(function () {\n    setIsEditing(false);\n    setPrevValue(value);\n    onSubmitProp == null ? void 0 : onSubmitProp(value);\n    onBlurProp == null ? void 0 : onBlurProp(prevValue);\n  }, [value, onSubmitProp, onBlurProp, prevValue]);\n  useEffect(function () {\n    if (isEditing) return;\n    var inputEl = inputRef.current;\n    if ((inputEl == null ? void 0 : inputEl.ownerDocument.activeElement) === inputEl) {\n      inputEl == null ? void 0 : inputEl.blur();\n    }\n  }, [isEditing]);\n  var onChange = useCallback(function (event) {\n    setValue(event.currentTarget.value);\n  }, [setValue]);\n  var onKeyDown = useCallback(function (event) {\n    var eventKey = event.key;\n    var keyMap = {\n      Escape: onCancel,\n      Enter: function Enter(event2) {\n        if (!event2.shiftKey && !event2.metaKey) {\n          onSubmit();\n        }\n      }\n    };\n    var action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [onCancel, onSubmit]);\n  var onKeyDownWithoutSubmit = useCallback(function (event) {\n    var eventKey = event.key;\n    var keyMap = {\n      Escape: onCancel\n    };\n    var action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [onCancel]);\n  var isValueEmpty = value.length === 0;\n  var onBlur = useCallback(function (event) {\n    var _a;\n    if (!isEditing) return;\n    var doc = event.currentTarget.ownerDocument;\n    var relatedTarget = (_a = event.relatedTarget) != null ? _a : doc.activeElement;\n    var targetIsCancel = contains(cancelButtonRef.current, relatedTarget);\n    var targetIsSubmit = contains(submitButtonRef.current, relatedTarget);\n    var isValidBlur = !targetIsCancel && !targetIsSubmit;\n    if (isValidBlur) {\n      if (submitOnBlur) {\n        onSubmit();\n      } else {\n        onCancel();\n      }\n    }\n  }, [submitOnBlur, onSubmit, onCancel, isEditing]);\n  var getPreviewProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var tabIndex = isInteractive && isPreviewFocusable ? 0 : void 0;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: mergeRefs(ref, previewRef),\n      children: isValueEmpty ? placeholder : value,\n      hidden: isEditing,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      tabIndex: tabIndex,\n      onFocus: callAllHandlers(props2.onFocus, onEdit, onUpdatePrevValue)\n    });\n  }, [isDisabled, isEditing, isInteractive, isPreviewFocusable, isValueEmpty, onEdit, onUpdatePrevValue, placeholder, value]);\n  var getInputProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      hidden: !isEditing,\n      placeholder: placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value: value,\n      onBlur: callAllHandlers(props2.onBlur, onBlur),\n      onChange: callAllHandlers(props2.onChange, onChange),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props2.onFocus, onUpdatePrevValue)\n    });\n  }, [isDisabled, isEditing, onBlur, onChange, onKeyDown, onUpdatePrevValue, placeholder, value]);\n  var getTextareaProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      hidden: !isEditing,\n      placeholder: placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value: value,\n      onBlur: callAllHandlers(props2.onBlur, onBlur),\n      onChange: callAllHandlers(props2.onChange, onChange),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDownWithoutSubmit),\n      onFocus: callAllHandlers(props2.onFocus, onUpdatePrevValue)\n    });\n  }, [isDisabled, isEditing, onBlur, onChange, onKeyDownWithoutSubmit, onUpdatePrevValue, placeholder, value]);\n  var getEditButtonProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({\n      \"aria-label\": \"Edit\"\n    }, props2), {}, {\n      type: \"button\",\n      onClick: callAllHandlers(props2.onClick, onEdit),\n      ref: mergeRefs(ref, editButtonRef),\n      disabled: isDisabled\n    });\n  }, [onEdit, isDisabled]);\n  var getSubmitButtonProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      \"aria-label\": \"Submit\",\n      ref: mergeRefs(submitButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props2.onClick, onSubmit),\n      disabled: isDisabled\n    });\n  }, [onSubmit, isDisabled]);\n  var getCancelButtonProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({\n      \"aria-label\": \"Cancel\",\n      id: \"cancel\"\n    }, props2), {}, {\n      ref: mergeRefs(cancelButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props2.onClick, onCancel),\n      disabled: isDisabled\n    });\n  }, [onCancel, isDisabled]);\n  return {\n    isEditing: isEditing,\n    isDisabled: isDisabled,\n    isValueEmpty: isValueEmpty,\n    value: value,\n    onEdit: onEdit,\n    onCancel: onCancel,\n    onSubmit: onSubmit,\n    getPreviewProps: getPreviewProps,\n    getInputProps: getInputProps,\n    getTextareaProps: getTextareaProps,\n    getEditButtonProps: getEditButtonProps,\n    getSubmitButtonProps: getSubmitButtonProps,\n    getCancelButtonProps: getCancelButtonProps,\n    htmlProps: htmlProps\n  };\n}\nexport { useEditable };","map":{"version":3,"mappings":"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","names":["useFocusOnPointerDown","useSafeLayoutEffect","useUpdateEffect","useControllableState","mergeRefs","useCallbackRef","ariaAttr","callAllHandlers","useCallback","useEffect","useRef","useState","contains","parent","child","useEditable","props","onChangeProp","onChange","onCancelProp","onCancel","onSubmitProp","onSubmit","onBlurProp","onBlur","valueProp","value","isDisabled","defaultValue","startWithEditView","isPreviewFocusable","submitOnBlur","selectAllOnFocus","placeholder","onEditCallback","onEdit","finalFocusRef","htmlProps","onEditProp","defaultIsEditing","Boolean","isEditing","setIsEditing","setValue","prevValue","setPrevValue","inputRef","previewRef","editButtonRef","cancelButtonRef","submitButtonRef","ref","enabled","elements","isInteractive","current","focus","select","onUpdatePrevValue","inputEl","ownerDocument","activeElement","blur","event","currentTarget","onKeyDown","eventKey","key","keyMap","Escape","Enter","shiftKey","metaKey","action","preventDefault","onKeyDownWithoutSubmit","isValueEmpty","length","doc","relatedTarget","_a","targetIsCancel","targetIsSubmit","isValidBlur","getPreviewProps","tabIndex","children","hidden","onFocus","getInputProps","disabled","getTextareaProps","getEditButtonProps","type","onClick","getSubmitButtonProps","getCancelButtonProps","id"],"sources":["D:\\portfolio\\node_modules\\@chakra-ui\\editable\\src\\use-editable.ts"],"sourcesContent":["import { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\"\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { useCallback, useEffect, useRef, useState, RefObject } from \"react\"\n\ninterface FocusableElement {\n  focus(options?: FocusOptions): void\n}\n\nexport interface UseEditableProps {\n  /**\n   * The value of the Editable in both edit & preview mode\n   */\n  value?: string\n  /**\n   * The initial value of the Editable in both edit & preview mode\n   */\n  defaultValue?: string\n  /**\n   * If `true`, the Editable will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the Editable will start with edit mode by default.\n   */\n  startWithEditView?: boolean\n  /**\n   * If `true`, the read only view, has a `tabIndex` set to `0`\n   * so it can receive focus via the keyboard or click.\n   * @default true\n   */\n  isPreviewFocusable?: boolean\n  /**\n   * If `true`, it'll update the value onBlur and turn off the edit mode.\n   * @default true\n   */\n  submitOnBlur?: boolean\n  /**\n   * Callback invoked when user changes input.\n   */\n  onChange?: (nextValue: string) => void\n  /**\n   * Callback invoked when user cancels input with the `Esc` key.\n   * It provides the last confirmed value as argument.\n   */\n  onCancel?: (previousValue: string) => void\n  /**\n   * Callback invoked when user confirms value with `enter` key or by blurring input.\n   */\n  onSubmit?: (nextValue: string) => void\n  /**\n   * Callback invoked once the user enters edit mode.\n   */\n  onEdit?: () => void\n  /**\n   * Callback invoked when the user either submits or cancels.\n   * It provides the last confirmed value as argument.\n   */\n  onBlur?: (nextValue: string) => void\n  /**\n   * If `true`, the input's text will be highlighted on focus.\n   * @default true\n   */\n  selectAllOnFocus?: boolean\n  /**\n   * The placeholder text when the value is empty.\n   */\n  placeholder?: string\n  /**\n   * The `ref` of element to receive focus when the modal closes.\n   */\n  finalFocusRef?: RefObject<FocusableElement>\n}\n\nfunction contains(parent: HTMLElement | null, child: HTMLElement) {\n  if (!parent) return false\n  return parent === child || parent.contains(child)\n}\n\n/**\n * React hook for managing the inline renaming of some text.\n *\n * @see Docs https://chakra-ui.com/editable\n */\nexport function useEditable(props: UseEditableProps = {}) {\n  const {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    onBlur: onBlurProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditCallback,\n    finalFocusRef,\n    ...htmlProps\n  } = props\n\n  const onEditProp = useCallbackRef(onEditCallback)\n\n  const defaultIsEditing = Boolean(startWithEditView && !isDisabled)\n\n  const [isEditing, setIsEditing] = useState(defaultIsEditing)\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  /**\n   * Keep track of the previous value, so if users\n   * presses `cancel`, we can revert to it.\n   */\n  const [prevValue, setPrevValue] = useState(value)\n\n  /**\n   * Ref to help focus the input in edit mode\n   */\n  const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null)\n  const previewRef = useRef<any>(null)\n\n  const editButtonRef = useRef<HTMLButtonElement>(null)\n  const cancelButtonRef = useRef<HTMLElement>(null)\n  const submitButtonRef = useRef<HTMLElement>(null)\n\n  useFocusOnPointerDown({\n    ref: inputRef,\n    enabled: isEditing,\n    elements: [cancelButtonRef, submitButtonRef],\n  })\n\n  const isInteractive = !isEditing && !isDisabled\n\n  useSafeLayoutEffect(() => {\n    if (isEditing) {\n      inputRef.current?.focus()\n      if (selectAllOnFocus) inputRef.current?.select()\n    }\n  }, [])\n\n  useUpdateEffect(() => {\n    if (!isEditing) {\n      if (finalFocusRef) {\n        finalFocusRef.current?.focus()\n      } else {\n        editButtonRef.current?.focus()\n      }\n      return\n    }\n\n    inputRef.current?.focus()\n\n    if (selectAllOnFocus) {\n      inputRef.current?.select()\n    }\n\n    onEditProp?.()\n  }, [isEditing, onEditProp, selectAllOnFocus])\n\n  const onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true)\n    }\n  }, [isInteractive])\n\n  const onUpdatePrevValue = useCallback(() => {\n    setPrevValue(value)\n  }, [value])\n\n  const onCancel = useCallback(() => {\n    setIsEditing(false)\n    setValue(prevValue)\n    onCancelProp?.(prevValue)\n    onBlurProp?.(prevValue)\n  }, [onCancelProp, onBlurProp, setValue, prevValue])\n\n  const onSubmit = useCallback(() => {\n    setIsEditing(false)\n    setPrevValue(value)\n    onSubmitProp?.(value)\n    onBlurProp?.(prevValue)\n  }, [value, onSubmitProp, onBlurProp, prevValue])\n\n  useEffect(() => {\n    if (isEditing) return\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=559561\n    const inputEl = inputRef.current\n    if (inputEl?.ownerDocument.activeElement === inputEl) {\n      inputEl?.blur()\n    }\n  }, [isEditing])\n\n  const onChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      setValue(event.currentTarget.value)\n    },\n    [setValue],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = event.key\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        Escape: onCancel,\n        Enter: (event) => {\n          if (!event.shiftKey && !event.metaKey) {\n            onSubmit()\n          }\n        },\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [onCancel, onSubmit],\n  )\n\n  const onKeyDownWithoutSubmit = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = event.key\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        Escape: onCancel,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [onCancel],\n  )\n\n  const isValueEmpty = value.length === 0\n\n  const onBlur = useCallback(\n    (event: React.FocusEvent) => {\n      if (!isEditing) return\n      const doc = event.currentTarget.ownerDocument\n      const relatedTarget = (event.relatedTarget ??\n        doc.activeElement) as HTMLElement\n      const targetIsCancel = contains(cancelButtonRef.current, relatedTarget)\n      const targetIsSubmit = contains(submitButtonRef.current, relatedTarget)\n      const isValidBlur = !targetIsCancel && !targetIsSubmit\n\n      if (isValidBlur) {\n        if (submitOnBlur) {\n          onSubmit()\n        } else {\n          onCancel()\n        }\n      }\n    },\n    [submitOnBlur, onSubmit, onCancel, isEditing],\n  )\n\n  const getPreviewProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const tabIndex = isInteractive && isPreviewFocusable ? 0 : undefined\n      return {\n        ...props,\n        ref: mergeRefs(ref, previewRef),\n        children: isValueEmpty ? placeholder : value,\n        hidden: isEditing,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        tabIndex,\n        onFocus: callAllHandlers(props.onFocus, onEdit, onUpdatePrevValue),\n      }\n    },\n    [\n      isDisabled,\n      isEditing,\n      isInteractive,\n      isPreviewFocusable,\n      isValueEmpty,\n      onEdit,\n      onUpdatePrevValue,\n      placeholder,\n      value,\n    ],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, onUpdatePrevValue),\n    }),\n    [\n      isDisabled,\n      isEditing,\n      onBlur,\n      onChange,\n      onKeyDown,\n      onUpdatePrevValue,\n      placeholder,\n      value,\n    ],\n  )\n\n  const getTextareaProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDownWithoutSubmit),\n      onFocus: callAllHandlers(props.onFocus, onUpdatePrevValue),\n    }),\n    [\n      isDisabled,\n      isEditing,\n      onBlur,\n      onChange,\n      onKeyDownWithoutSubmit,\n      onUpdatePrevValue,\n      placeholder,\n      value,\n    ],\n  )\n\n  const getEditButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      \"aria-label\": \"Edit\",\n      ...props,\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onEdit),\n      ref: mergeRefs(ref, editButtonRef),\n      disabled: isDisabled,\n    }),\n    [onEdit, isDisabled],\n  )\n\n  const getSubmitButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      \"aria-label\": \"Submit\",\n      ref: mergeRefs(submitButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onSubmit),\n      disabled: isDisabled,\n    }),\n    [onSubmit, isDisabled],\n  )\n\n  const getCancelButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      \"aria-label\": \"Cancel\",\n      id: \"cancel\",\n      ...props,\n      ref: mergeRefs(cancelButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onCancel),\n      disabled: isDisabled,\n    }),\n    [onCancel, isDisabled],\n  )\n\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getTextareaProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps,\n  }\n}\n\nexport type UseEditableReturn = ReturnType<typeof useEditable>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}