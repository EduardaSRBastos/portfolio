{"ast":null,"code":"'use client';\n\n// src/use-pin-input.ts\nimport _objectSpread from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _toConsumableArray from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _excluded = [\"index\"];\nimport { createDescendantContext } from \"@chakra-ui/descendant\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { useCallback, useEffect, useState, useId } from \"react\";\nvar _createDescendantCont = createDescendantContext(),\n  _createDescendantCont2 = _slicedToArray(_createDescendantCont, 4),\n  PinInputDescendantsProvider = _createDescendantCont2[0],\n  usePinInputDescendantsContext = _createDescendantCont2[1],\n  usePinInputDescendants = _createDescendantCont2[2],\n  usePinInputDescendant = _createDescendantCont2[3];\nvar _createContext = createContext({\n    name: \"PinInputContext\",\n    errorMessage: \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\"\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  PinInputProvider = _createContext2[0],\n  usePinInputContext = _createContext2[1];\nvar toArray = function toArray(value) {\n  return value == null ? void 0 : value.split(\"\");\n};\nfunction validate(value, type) {\n  var NUMERIC_REGEX = /^[0-9]+$/;\n  var ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i;\n  var regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX;\n  return regex.test(value);\n}\nfunction usePinInput() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var autoFocus = props.autoFocus,\n    value = props.value,\n    defaultValue = props.defaultValue,\n    _onChange = props.onChange,\n    onComplete = props.onComplete,\n    _props$placeholder = props.placeholder,\n    placeholder = _props$placeholder === void 0 ? \"\\u25CB\" : _props$placeholder,\n    _props$manageFocus = props.manageFocus,\n    manageFocus = _props$manageFocus === void 0 ? true : _props$manageFocus,\n    _props$otp = props.otp,\n    otp = _props$otp === void 0 ? false : _props$otp,\n    idProp = props.id,\n    isDisabled = props.isDisabled,\n    isInvalid = props.isInvalid,\n    _props$type = props.type,\n    type = _props$type === void 0 ? \"number\" : _props$type,\n    mask = props.mask;\n  var uuid = useId();\n  var id = idProp != null ? idProp : \"pin-input-\".concat(uuid);\n  var descendants = usePinInputDescendants();\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    moveFocus = _useState2[0],\n    setMoveFocus = _useState2[1];\n  var _useState3 = useState(-1),\n    _useState4 = _slicedToArray(_useState3, 2),\n    focusedIndex = _useState4[0],\n    setFocusedIndex = _useState4[1];\n  var _useControllableState = useControllableState({\n      defaultValue: toArray(defaultValue) || [],\n      value: toArray(value),\n      onChange: function onChange(values2) {\n        return _onChange == null ? void 0 : _onChange(values2.join(\"\"));\n      }\n    }),\n    _useControllableState2 = _slicedToArray(_useControllableState, 2),\n    values = _useControllableState2[0],\n    setValues = _useControllableState2[1];\n  useEffect(function () {\n    if (autoFocus) {\n      var first = descendants.first();\n      if (first) {\n        requestAnimationFrame(function () {\n          first.node.focus();\n        });\n      }\n    }\n  }, [descendants]);\n  var focusNext = useCallback(function (index) {\n    if (!moveFocus || !manageFocus) return;\n    var next = descendants.next(index, false);\n    if (next) {\n      requestAnimationFrame(function () {\n        next.node.focus();\n      });\n    }\n  }, [descendants, moveFocus, manageFocus]);\n  var setValue = useCallback(function (value2, index) {\n    var handleFocus = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var nextValues = _toConsumableArray(values);\n    nextValues[index] = value2;\n    setValues(nextValues);\n    var isComplete = value2 !== \"\" && nextValues.length === descendants.count() && nextValues.every(function (inputValue) {\n      return inputValue != null && inputValue !== \"\";\n    });\n    if (isComplete) {\n      onComplete == null ? void 0 : onComplete(nextValues.join(\"\"));\n    } else {\n      if (handleFocus) focusNext(index);\n    }\n  }, [values, setValues, focusNext, onComplete, descendants]);\n  var clear = useCallback(function () {\n    var _a;\n    var values2 = Array(descendants.count()).fill(\"\");\n    setValues(values2);\n    var first = descendants.first();\n    (_a = first == null ? void 0 : first.node) == null ? void 0 : _a.focus();\n  }, [descendants, setValues]);\n  var getNextValue = useCallback(function (value2, eventValue) {\n    var nextValue = eventValue;\n    if ((value2 == null ? void 0 : value2.length) > 0) {\n      if (value2[0] === eventValue.charAt(0)) {\n        nextValue = eventValue.charAt(1);\n      } else if (value2[0] === eventValue.charAt(1)) {\n        nextValue = eventValue.charAt(0);\n      }\n    }\n    return nextValue;\n  }, []);\n  var getInputProps = useCallback(function (props2) {\n    var index = props2.index,\n      rest = _objectWithoutProperties(props2, _excluded);\n    var onChange2 = function onChange2(event) {\n      var eventValue = event.target.value;\n      var currentValue = values[index];\n      var nextValue = getNextValue(currentValue, eventValue);\n      if (nextValue === \"\") {\n        setValue(\"\", index);\n        return;\n      }\n      if (eventValue.length > 2) {\n        if (validate(eventValue, type)) {\n          var nextValue2 = eventValue.split(\"\").filter(function (_, index2) {\n            return index2 < descendants.count();\n          });\n          setValues(nextValue2);\n          if (nextValue2.length === descendants.count()) {\n            onComplete == null ? void 0 : onComplete(nextValue2.join(\"\"));\n          }\n        }\n      } else {\n        if (validate(nextValue, type)) {\n          setValue(nextValue, index);\n        }\n        setMoveFocus(true);\n      }\n    };\n    var onKeyDown = function onKeyDown(event) {\n      var _a;\n      if (event.key === \"Backspace\" && manageFocus) {\n        if (event.target.value === \"\") {\n          var prevInput = descendants.prev(index, false);\n          if (prevInput) {\n            setValue(\"\", index - 1, false);\n            (_a = prevInput.node) == null ? void 0 : _a.focus();\n            setMoveFocus(true);\n          }\n        } else {\n          setMoveFocus(false);\n        }\n      }\n    };\n    var onFocus = function onFocus() {\n      setFocusedIndex(index);\n    };\n    var onBlur = function onBlur() {\n      setFocusedIndex(-1);\n    };\n    var hasFocus = focusedIndex === index;\n    var inputType = type === \"number\" ? \"tel\" : \"text\";\n    return _objectSpread(_objectSpread({\n      \"aria-label\": \"Please enter your pin code\",\n      inputMode: type === \"number\" ? \"numeric\" : \"text\",\n      type: mask ? \"password\" : inputType\n    }, rest), {}, {\n      id: \"\".concat(id, \"-\").concat(index),\n      disabled: isDisabled,\n      \"aria-invalid\": ariaAttr(isInvalid),\n      onChange: callAllHandlers(rest.onChange, onChange2),\n      onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(rest.onFocus, onFocus),\n      onBlur: callAllHandlers(rest.onBlur, onBlur),\n      value: values[index] || \"\",\n      autoComplete: otp ? \"one-time-code\" : \"off\",\n      placeholder: hasFocus ? \"\" : placeholder\n    });\n  }, [descendants, focusedIndex, getNextValue, id, isDisabled, mask, isInvalid, manageFocus, onComplete, otp, placeholder, setValue, setValues, type, values]);\n  return {\n    // prop getter\n    getInputProps: getInputProps,\n    // state\n    id: id,\n    descendants: descendants,\n    values: values,\n    // actions\n    setValue: setValue,\n    setValues: setValues,\n    clear: clear\n  };\n}\nfunction usePinInputField() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var _usePinInputContext = usePinInputContext(),\n    getInputProps = _usePinInputContext.getInputProps;\n  var _usePinInputDescendan = usePinInputDescendant(),\n    index = _usePinInputDescendan.index,\n    register = _usePinInputDescendan.register;\n  return getInputProps(_objectSpread(_objectSpread({}, props), {}, {\n    ref: mergeRefs(register, ref),\n    index: index\n  }));\n}\nexport { PinInputDescendantsProvider, usePinInputDescendantsContext, usePinInputDescendants, usePinInputDescendant, PinInputProvider, usePinInputContext, usePinInput, usePinInputField };","map":{"version":3,"mappings":"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","names":["createDescendantContext","useControllableState","ariaAttr","callAllHandlers","createContext","mergeRefs","useCallback","useEffect","useState","useId","PinInputDescendantsProvider","usePinInputDescendantsContext","usePinInputDescendants","usePinInputDescendant","name","errorMessage","PinInputProvider","usePinInputContext","toArray","value","split","validate","type","NUMERIC_REGEX","ALPHA_NUMERIC_REGEX","regex","test","usePinInput","props","autoFocus","defaultValue","onChange","onComplete","placeholder","manageFocus","otp","idProp","id","isDisabled","isInvalid","mask","uuid","descendants","moveFocus","setMoveFocus","focusedIndex","setFocusedIndex","values","join","setValues","first","requestAnimationFrame","node","focus","focusNext","index","next","setValue","handleFocus","nextValues","isComplete","length","count","every","inputValue","clear","Array","fill","getNextValue","eventValue","nextValue","charAt","getInputProps","rest","event","target","currentValue","filter","_","onKeyDown","key","prevInput","prev","onFocus","onBlur","hasFocus","inputType","inputMode","disabled","autoComplete","usePinInputField","ref","register"],"sources":["D:\\portfolio\\node_modules\\@chakra-ui\\pin-input\\src\\use-pin-input.ts"],"sourcesContent":["import { createDescendantContext } from \"@chakra-ui/descendant\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useCallback, useEffect, useState, useId } from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  PinInputDescendantsProvider,\n  usePinInputDescendantsContext,\n  usePinInputDescendants,\n  usePinInputDescendant,\n] = createDescendantContext<HTMLInputElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * Create context that stores pin-input logic\n * -----------------------------------------------------------------------------------------------*/\n\nexport type PinInputContext = Omit<UsePinInputReturn, \"descendants\"> & {\n  /**\n   * Sets the pin input component to the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * Sets the pin input component to the invalid state\n   */\n  isInvalid?: boolean\n}\n\nexport const [PinInputProvider, usePinInputContext] =\n  createContext<PinInputContext>({\n    name: \"PinInputContext\",\n    errorMessage:\n      \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\",\n  })\n\n/* -------------------------------------------------------------------------------------------------\n * usePinInput hook\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UsePinInputProps {\n  /**\n   * If `true`, the pin input receives focus on mount\n   */\n  autoFocus?: boolean\n  /**\n   * The value of the pin input. This is the value\n   * that will be returned when the pin input is filled\n   */\n  value?: string\n  /**\n   * The default value of the pin input\n   */\n  defaultValue?: string\n  /**\n   * Function called on input change\n   */\n  onChange?: (value: string) => void\n  /**\n   * Function called when all inputs have valid values\n   */\n  onComplete?: (value: string) => void\n  /**\n   * The placeholder for the pin input\n   */\n  placeholder?: string\n  /**\n   * If `true`, focus will move automatically to the next input once filled\n   * @default true\n   */\n  manageFocus?: boolean\n  /**\n   * If `true`, the pin input component signals to its fields that they should\n   * use `autocomplete=\"one-time-code\"`.\n   */\n  otp?: boolean\n  /**\n   * The top-level id string that will be applied to the input fields.\n   * The index of the input will be appended to this top-level id.\n   *\n   * @example\n   * if id=\"foo\", the first input will have `foo-0`\n   */\n  id?: string\n  /**\n   * If `true`, the pin input component is put in the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the pin input component is put in the invalid state\n   */\n  isInvalid?: boolean\n  /**\n   * The type of values the pin-input should allow\n   */\n  type?: \"alphanumeric\" | \"number\"\n  /**\n   * If `true`, the input's value will be masked just like `type=password`\n   */\n  mask?: boolean\n}\n\nconst toArray = (value?: string) => value?.split(\"\")\n\nfunction validate(value: string, type: UsePinInputProps[\"type\"]) {\n  const NUMERIC_REGEX = /^[0-9]+$/\n  const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i\n  const regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX\n  return regex.test(value)\n}\n\n/* -------------------------------------------------------------------------------------------------\n * usePinInput - handles the general pin input logic\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n */\nexport function usePinInput(props: UsePinInputProps = {}) {\n  const {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange,\n    onComplete,\n    placeholder = \"○\",\n    manageFocus = true,\n    otp = false,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n    type = \"number\",\n    mask,\n  } = props\n\n  const uuid = useId()\n  const id = idProp ?? `pin-input-${uuid}`\n\n  const descendants = usePinInputDescendants()\n\n  const [moveFocus, setMoveFocus] = useState(true)\n  const [focusedIndex, setFocusedIndex] = useState(-1)\n\n  const [values, setValues] = useControllableState<string[]>({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: (values) => onChange?.(values.join(\"\")),\n  })\n\n  useEffect(() => {\n    if (autoFocus) {\n      const first = descendants.first()\n      if (first) {\n        requestAnimationFrame(() => {\n          first.node.focus()\n        })\n      }\n    }\n    // We don't want to listen for updates to `autoFocus` since it only runs initially\n    // eslint-disable-next-line\n  }, [descendants])\n\n  const focusNext = useCallback(\n    (index: number) => {\n      if (!moveFocus || !manageFocus) return\n      const next = descendants.next(index, false)\n      if (next) {\n        requestAnimationFrame(() => {\n          next.node.focus()\n        })\n      }\n    },\n    [descendants, moveFocus, manageFocus],\n  )\n\n  const setValue = useCallback(\n    (value: string, index: number, handleFocus: boolean = true) => {\n      const nextValues = [...values]\n      nextValues[index] = value\n      setValues(nextValues)\n\n      const isComplete =\n        value !== \"\" &&\n        nextValues.length === descendants.count() &&\n        nextValues.every(\n          (inputValue) => inputValue != null && inputValue !== \"\",\n        )\n\n      if (isComplete) {\n        onComplete?.(nextValues.join(\"\"))\n      } else {\n        if (handleFocus) focusNext(index)\n      }\n    },\n    [values, setValues, focusNext, onComplete, descendants],\n  )\n\n  const clear = useCallback(() => {\n    const values: string[] = Array(descendants.count()).fill(\"\")\n    setValues(values)\n    const first = descendants.first()\n    first?.node?.focus()\n  }, [descendants, setValues])\n\n  const getNextValue = useCallback((value: string, eventValue: string) => {\n    let nextValue = eventValue\n    if (value?.length > 0) {\n      if (value[0] === eventValue.charAt(0)) {\n        nextValue = eventValue.charAt(1)\n      } else if (value[0] === eventValue.charAt(1)) {\n        nextValue = eventValue.charAt(0)\n      }\n    }\n    return nextValue\n  }, [])\n\n  const getInputProps = useCallback(\n    (props: InputProps & { index: number }): InputProps => {\n      const { index, ...rest } = props\n\n      /**\n       * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n       */\n      const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const eventValue = event.target.value\n        const currentValue = values[index]\n        const nextValue = getNextValue(currentValue, eventValue)\n\n        // if the value was removed using backspace\n        if (nextValue === \"\") {\n          setValue(\"\", index)\n          return\n        }\n\n        // in the case of an autocomplete or copy and paste\n        if (eventValue.length > 2) {\n          // see if we can use the string to fill out our values\n          if (validate(eventValue, type)) {\n            // Ensure the value matches the number of inputs\n            const nextValue = eventValue\n              .split(\"\")\n              .filter((_, index) => index < descendants.count())\n\n            setValues(nextValue)\n\n            // if pasting fills the entire input fields, trigger `onComplete`\n            if (nextValue.length === descendants.count()) {\n              onComplete?.(nextValue.join(\"\"))\n            }\n          }\n        } else {\n          // only set if the new value is a number\n          if (validate(nextValue, type)) {\n            setValue(nextValue, index)\n          }\n\n          setMoveFocus(true)\n        }\n      }\n\n      const onKeyDown = (event: React.KeyboardEvent) => {\n        if (event.key === \"Backspace\" && manageFocus) {\n          if ((event.target as HTMLInputElement).value === \"\") {\n            const prevInput = descendants.prev(index, false)\n            if (prevInput) {\n              setValue(\"\", index - 1, false)\n              prevInput.node?.focus()\n              setMoveFocus(true)\n            }\n          } else {\n            setMoveFocus(false)\n          }\n        }\n      }\n\n      const onFocus = () => {\n        setFocusedIndex(index)\n      }\n\n      const onBlur = () => {\n        setFocusedIndex(-1)\n      }\n\n      const hasFocus = focusedIndex === index\n      const inputType = type === \"number\" ? \"tel\" : \"text\"\n\n      return {\n        \"aria-label\": \"Please enter your pin code\",\n        inputMode: type === \"number\" ? \"numeric\" : \"text\",\n        type: mask ? \"password\" : inputType,\n        ...rest,\n        id: `${id}-${index}`,\n        disabled: isDisabled,\n        \"aria-invalid\": ariaAttr(isInvalid),\n        onChange: callAllHandlers(rest.onChange, onChange),\n        onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(rest.onFocus, onFocus),\n        onBlur: callAllHandlers(rest.onBlur, onBlur),\n        value: values[index] || \"\",\n        autoComplete: otp ? \"one-time-code\" : \"off\",\n        placeholder: hasFocus ? \"\" : placeholder,\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      getNextValue,\n      id,\n      isDisabled,\n      mask,\n      isInvalid,\n      manageFocus,\n      onComplete,\n      otp,\n      placeholder,\n      setValue,\n      setValues,\n      type,\n      values,\n    ],\n  )\n\n  return {\n    // prop getter\n    getInputProps,\n    // state\n    id,\n    descendants,\n    values,\n    // actions\n    setValue,\n    setValues,\n    clear,\n  }\n}\n\nexport type UsePinInputReturn = ReturnType<typeof usePinInput>\n\nexport interface UsePinInputFieldProps extends InputProps {\n  ref?: React.Ref<HTMLInputElement>\n}\n\n/**\n * @internal\n */\nexport function usePinInputField(\n  props: UsePinInputFieldProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const { getInputProps } = usePinInputContext()\n  const { index, register } = usePinInputDescendant()\n\n  return getInputProps({\n    ...props,\n    ref: mergeRefs(register, ref),\n    index,\n  })\n}\n\ninterface InputProps\n  extends Omit<\n    React.ComponentPropsWithRef<\"input\">,\n    \"color\" | \"height\" | \"width\"\n  > {}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}