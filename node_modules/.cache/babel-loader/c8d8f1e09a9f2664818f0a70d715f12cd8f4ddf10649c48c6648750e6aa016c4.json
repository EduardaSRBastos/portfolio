{"ast":null,"code":"'use client';\n\nimport _objectSpread from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"D:/portfolio/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"defaultChecked\", \"isChecked\", \"isFocusable\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"onChange\", \"isInvalid\", \"name\", \"value\", \"id\", \"data-radiogroup\", \"aria-describedby\"];\nimport { useRadioGroupContext } from \"./chunk-X4Z64PN5.mjs\";\n\n// src/use-radio.ts\nimport { useFormControlContext } from \"@chakra-ui/form-control\";\nimport { ariaAttr, callAllHandlers, dataAttr } from \"@chakra-ui/shared-utils\";\n\n// ../visually-hidden/src/visually-hidden.style.ts\nvar visuallyHiddenStyle = {\n  border: \"0\",\n  clip: \"rect(0, 0, 0, 0)\",\n  height: \"1px\",\n  width: \"1px\",\n  margin: \"-1px\",\n  padding: \"0\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\"\n};\n\n// src/use-radio.ts\nimport { trackFocusVisible } from \"@zag-js/focus-visible\";\nimport { useCallback, useEffect, useState, useId } from \"react\";\nfunction useRadio() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaultChecked = props.defaultChecked,\n    isCheckedProp = props.isChecked,\n    isFocusable = props.isFocusable,\n    isDisabledProp = props.isDisabled,\n    isReadOnlyProp = props.isReadOnly,\n    isRequiredProp = props.isRequired,\n    onChange = props.onChange,\n    isInvalidProp = props.isInvalid,\n    name = props.name,\n    value = props.value,\n    idProp = props.id,\n    dataRadioGroup = props[\"data-radiogroup\"],\n    ariaDescribedBy = props[\"aria-describedby\"],\n    htmlProps = _objectWithoutProperties(props, _excluded);\n  var uuid = \"radio-\".concat(useId());\n  var formControl = useFormControlContext();\n  var group = useRadioGroupContext();\n  var isWithinRadioGroup = !!group || !!dataRadioGroup;\n  var isWithinFormControl = !!formControl;\n  var id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid;\n  id = idProp != null ? idProp : id;\n  var isDisabled = isDisabledProp != null ? isDisabledProp : formControl == null ? void 0 : formControl.isDisabled;\n  var isReadOnly = isReadOnlyProp != null ? isReadOnlyProp : formControl == null ? void 0 : formControl.isReadOnly;\n  var isRequired = isRequiredProp != null ? isRequiredProp : formControl == null ? void 0 : formControl.isRequired;\n  var isInvalid = isInvalidProp != null ? isInvalidProp : formControl == null ? void 0 : formControl.isInvalid;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isFocusVisible = _useState2[0],\n    setIsFocusVisible = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isFocused = _useState4[0],\n    setFocused = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isHovered = _useState6[0],\n    setHovering = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isActive = _useState8[0],\n    setActive = _useState8[1];\n  var _useState9 = useState(Boolean(defaultChecked)),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isCheckedState = _useState10[0],\n    setChecked = _useState10[1];\n  var isControlled = typeof isCheckedProp !== \"undefined\";\n  var isChecked = isControlled ? isCheckedProp : isCheckedState;\n  useEffect(function () {\n    return trackFocusVisible(setIsFocusVisible);\n  }, []);\n  var handleChange = useCallback(function (event) {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n    if (!isControlled) {\n      setChecked(event.target.checked);\n    }\n    onChange == null ? void 0 : onChange(event);\n  }, [isControlled, isDisabled, isReadOnly, onChange]);\n  var onKeyDown = useCallback(function (event) {\n    if (event.key === \" \") {\n      setActive(true);\n    }\n  }, [setActive]);\n  var onKeyUp = useCallback(function (event) {\n    if (event.key === \" \") {\n      setActive(false);\n    }\n  }, [setActive]);\n  var getRadioProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props2.onMouseDown, function () {\n        return setActive(true);\n      }),\n      onMouseUp: callAllHandlers(props2.onMouseUp, function () {\n        return setActive(false);\n      }),\n      onMouseEnter: callAllHandlers(props2.onMouseEnter, function () {\n        return setHovering(true);\n      }),\n      onMouseLeave: callAllHandlers(props2.onMouseLeave, function () {\n        return setHovering(false);\n      })\n    });\n  }, [isActive, isHovered, isDisabled, isInvalid, isChecked, isFocused, isReadOnly, isFocusVisible]);\n  var _ref = formControl != null ? formControl : {},\n    onFocus = _ref.onFocus,\n    onBlur = _ref.onBlur;\n  var getInputProps = useCallback(function () {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var trulyDisabled = isDisabled && !isFocusable;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      id: id,\n      ref: ref,\n      type: \"radio\",\n      name: name,\n      value: value,\n      onChange: callAllHandlers(props2.onChange, handleChange),\n      onBlur: callAllHandlers(onBlur, props2.onBlur, function () {\n        return setFocused(false);\n      }),\n      onFocus: callAllHandlers(onFocus, props2.onFocus, function () {\n        return setFocused(true);\n      }),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      required: isRequired,\n      \"aria-invalid\": ariaAttr(isInvalid),\n      \"aria-disabled\": ariaAttr(trulyDisabled),\n      \"aria-required\": ariaAttr(isRequired),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-describedby\": ariaDescribedBy,\n      style: visuallyHiddenStyle\n    });\n  }, [isDisabled, isFocusable, id, name, value, handleChange, onBlur, onFocus, onKeyDown, onKeyUp, isChecked, isReadOnly, isRequired, isInvalid, ariaDescribedBy]);\n  var getLabelProps = function getLabelProps() {\n    var props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: ref,\n      onMouseDown: callAllHandlers(props2.onMouseDown, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  };\n  var getRootProps = function getRootProps(props2) {\n    var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return _objectSpread(_objectSpread({}, props2), {}, {\n      ref: ref,\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  };\n  var state = {\n    isInvalid: isInvalid,\n    isFocused: isFocused,\n    isChecked: isChecked,\n    isActive: isActive,\n    isHovered: isHovered,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired\n  };\n  return {\n    state: state,\n    /**\n     * @deprecated - use `getRadioProps` instead\n     */\n    getCheckboxProps: getRadioProps,\n    getRadioProps: getRadioProps,\n    getInputProps: getInputProps,\n    getLabelProps: getLabelProps,\n    getRootProps: getRootProps,\n    htmlProps: htmlProps\n  };\n}\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\nexport { useRadio };","map":{"version":3,"mappings":";;;;;;;;;AAAA,SAASA,6BAA6B;AAEtC,SAASC,UAAUC,iBAAiBC,gBAAgB;;;ACE7C,IAAMC,sBAA2C;EACtDC,QAAQ;EACRC,MAAM;EACNC,QAAQ;EACRC,OAAO;EACPC,QAAQ;EACRC,SAAS;EACTC,UAAU;EACVC,YAAY;EACZC,UAAU;AACZ;;;ADVA,SAASC,yBAAyB;AAClC,SAASC,aAAaC,WAAWC,UAAUC,aAAa;AAgGjD,SAASC,WAAoC;EAAA,IAA3BC,4EAAuB,CAAC;EAC/C,IACEC,iBAcED,MAdFC;IACWC,gBAaTF,MAbFG;IACAC,cAYEJ,MAZFI;IACYC,iBAWVL,MAXFM;IACYC,iBAUVP,MAVFQ;IACYC,iBASVT,MATFU;IACAC,WAQEX,MARFW;IACWC,gBAOTZ,MAPFa;IACAC,OAMEd,MANFc;IACAC,QAKEf,MALFe;IACIC,SAIFhB,MAJFiB;IACmBC,iBAGjBlB,MAHF;IACoBmB,kBAElBnB,MAFF;IACGoB,qCACDpB;EAEJ,IAAMqB,uBAAgBvB,OAAM;EAE5B,IAAMwB,cAAc1C,uBAAsB;EAC1C,IAAM2C,QAAQC,sBAAqB;EAEnC,IAAMC,qBAAqB,CAAC,CAACF,SAAS,CAAC,CAACL;EACxC,IAAMQ,sBAAsB,CAAC,CAACJ;EAE9B,IAAIL,KAAKS,uBAAuB,CAACD,qBAAqBH,YAAYL,KAAKI;EACvEJ,KAAKD,0BAAUC;EAEf,IAAMX,aAAaD,0CAAkBiB,2CAAahB;EAClD,IAAME,aAAaD,0CAAkBe,2CAAad;EAClD,IAAME,aAAaD,0CAAkBa,2CAAaZ;EAClD,IAAMG,YAAYD,wCAAiBU,2CAAaT;EAEhD,gBAA4ChB,SAAS,KAAK;IAAA;IAAnD8B;IAAgBC,iBAAiB;EACxC,iBAAgC/B,SAAS,KAAK;IAAA;IAAvCgC;IAAWC,UAAU;EAC5B,iBAAiCjC,SAAS,KAAK;IAAA;IAAxCkC;IAAWC,WAAW;EAC7B,iBAA8BnC,SAAS,KAAK;IAAA;IAArCoC;IAAUC,SAAS;EAE1B,iBAAqCrC,SAASsC,QAAQlC,cAAc,CAAC;IAAA;IAA9DmC;IAAgBC,UAAU;EAEjC,IAAMC,eAAe,OAAOpC,kBAAkB;EAC9C,IAAMC,YAAYmC,eAAepC,gBAAgBkC;EAEjDxC,UAAU,YAAM;IACd,OAAOF,kBAAkBkC,iBAAiB;EAC5C,GAAG,EAAE;EAEL,IAAMW,eAAe5C,YACnB,UAAC6C,OAA+C;IAC9C,IAAIhC,cAAcF,YAAY;MAC5BkC,MAAMC,gBAAe;MACrB;IACF;IAEA,IAAI,CAACH,cAAc;MACjBD,WAAWG,MAAME,OAAOC,OAAO;IACjC;IAEAhC,qCAAW6B;EACb,GACA,CAACF,cAAchC,YAAYE,YAAYG,QAAQ,EACjD;EAEA,IAAMiC,YAAYjD,YAChB,UAAC6C,OAA+B;IAC9B,IAAIA,MAAMK,QAAQ,KAAK;MACrBX,UAAU,IAAI;IAChB;EACF,GACA,CAACA,SAAS,EACZ;EAEA,IAAMY,UAAUnD,YACd,UAAC6C,OAA+B;IAC9B,IAAIA,MAAMK,QAAQ,KAAK;MACrBX,UAAU,KAAK;IACjB;EACF,GACA,CAACA,SAAS,EACZ;EAEA,IAAMa,gBAA4BpD,YAChC;IAAA,IAACK,6EAAQ,CAAC;IAAA,IAAGgD,0EAAM;IAAA,uCACdhD;MACHgD;MACA,eAAejE,SAASkD,QAAQ;MAChC,cAAclD,SAASgD,SAAS;MAChC,iBAAiBhD,SAASuB,UAAU;MACpC,gBAAgBvB,SAAS8B,SAAS;MAClC,gBAAgB9B,SAASoB,SAAS;MAClC,cAAcpB,SAAS8C,SAAS;MAChC,sBAAsB9C,SAAS8C,aAAaF,cAAc;MAC1D,iBAAiB5C,SAASyB,UAAU;MACpC,eAAe;MACfyC,aAAanE,gBAAgBkB,OAAMiD,aAAa;QAAA,OAAMf,UAAU,IAAI,CAAC;MAAA;MACrEgB,WAAWpE,gBAAgBkB,OAAMkD,WAAW;QAAA,OAAMhB,UAAU,KAAK,CAAC;MAAA;MAClEiB,cAAcrE,gBAAgBkB,OAAMmD,cAAc;QAAA,OAChDnB,YAAY,IAAI;MAAA,EAClB;MACAoB,cAActE,gBAAgBkB,OAAMoD,cAAc;QAAA,OAChDpB,YAAY,KAAK;MAAA;IACnB;EAAA,CACF,EACA,CACEC,UACAF,WACAzB,YACAO,WACAV,WACA0B,WACArB,YACAmB,eACF,CACF;EAEA,WAA4BL,oCAAe,CAAC;IAApC+B;IAASC;EAEjB,IAAMC,gBACJ5D,YACE,YAA4B;IAAA,IAA3BK,6EAAQ,CAAC;IAAA,IAAGgD,0EAAM;IACjB,IAAMQ,gBAAgBlD,cAAc,CAACF;IAErC,uCACKJ;MACHiB;MACA+B;MACAS,MAAM;MACN3C;MACAC;MACAJ,UAAU7B,gBAAgBkB,OAAMW,UAAU4B,YAAY;MACtDe,QAAQxE,gBAAgBwE,QAAQtD,OAAMsD,QAAQ;QAAA,OAC5CxB,WAAW,KAAK;MAAA,EAClB;MACAuB,SAASvE,gBAAgBuE,SAASrD,OAAMqD,SAAS;QAAA,OAC/CvB,WAAW,IAAI;MAAA,EACjB;MACAc,WAAW9D,gBAAgBkB,OAAM4C,WAAWA,SAAS;MACrDE,SAAShE,gBAAgBkB,OAAM8C,SAASA,OAAO;MAC/CH,SAASxC;MACTuD,UAAUF;MACVG,UAAUnD;MACVoD,UAAUlD;MACV,gBAAgB7B,SAASgC,SAAS;MAClC,iBAAiBhC,SAAS2E,aAAa;MACvC,iBAAiB3E,SAAS6B,UAAU;MACpC,iBAAiB3B,SAASyB,UAAU;MACpC,oBAAoBW;MACpB0C,OAAO7E;IAAA;EAEX,GACA,CACEsB,YACAF,aACAa,IACAH,MACAC,OACAwB,cACAe,QACAD,SACAT,WACAE,SACA3C,WACAK,YACAE,YACAG,WACAM,gBACF,CACF;EAEF,IAAM2C,gBAA4B,SAA5BA;IAAA,IAA6B9D,6EAAQ,CAAC;IAAA,IAAGgD,0EAAM;IAAA,uCAChDhD;MACHgD;MACAC,aAAanE,gBAAgBkB,OAAMiD,aAAac,SAAS;MACzD,iBAAiBhF,SAASuB,UAAU;MACpC,gBAAgBvB,SAASoB,SAAS;MAClC,gBAAgBpB,SAAS8B,SAAS;IAAA;EAAA,CACpC;EAEA,IAAMmD,eAA2B,SAA3BA,aAA4BhE;IAAAA,IAAOgD,0EAAM;IAAA,uCAC1ChD;MACHgD;MACA,iBAAiBjE,SAASuB,UAAU;MACpC,gBAAgBvB,SAASoB,SAAS;MAClC,gBAAgBpB,SAAS8B,SAAS;IAAA;EAAA,CACpC;EAEA,IAAMoD,QAAoB;IACxBpD;IACAgB;IACA1B;IACA8B;IACAF;IACAzB;IACAE;IACAE;EACF;EAEA,OAAO;IACLuD;IAAA;AAAA;AAAA;IAIAC,kBAAkBnB;IAClBA;IACAQ;IACAO;IACAE;IACA5C;EACF;AACF;AAKA,SAAS2C,UAAUvB,OAA6B;EAC9CA,MAAMC,gBAAe;EACrBD,MAAM2B,iBAAgB;AACxB","names":["useFormControlContext","ariaAttr","callAllHandlers","dataAttr","visuallyHiddenStyle","border","clip","height","width","margin","padding","overflow","whiteSpace","position","trackFocusVisible","useCallback","useEffect","useState","useId","useRadio","props","defaultChecked","isCheckedProp","isChecked","isFocusable","isDisabledProp","isDisabled","isReadOnlyProp","isReadOnly","isRequiredProp","isRequired","onChange","isInvalidProp","isInvalid","name","value","idProp","id","dataRadioGroup","ariaDescribedBy","htmlProps","uuid","formControl","group","useRadioGroupContext","isWithinRadioGroup","isWithinFormControl","isFocusVisible","setIsFocusVisible","isFocused","setFocused","isHovered","setHovering","isActive","setActive","Boolean","isCheckedState","setChecked","isControlled","handleChange","event","preventDefault","target","checked","onKeyDown","key","onKeyUp","getRadioProps","ref","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","onFocus","onBlur","getInputProps","trulyDisabled","type","disabled","readOnly","required","style","getLabelProps","stopEvent","getRootProps","state","getCheckboxProps","stopPropagation"],"sources":["D:\\portfolio\\node_modules\\@chakra-ui\\radio\\src\\use-radio.ts","D:\\portfolio\\node_modules\\@chakra-ui\\visually-hidden\\src\\visually-hidden.style.ts"],"sourcesContent":["import { useFormControlContext } from \"@chakra-ui/form-control\"\nimport { InputDOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\nimport { ariaAttr, callAllHandlers, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport { trackFocusVisible } from \"@zag-js/focus-visible\"\nimport { useCallback, useEffect, useState, useId } from \"react\"\nimport { useRadioGroupContext } from \"./radio-group\"\n\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\nexport interface UseRadioProps {\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * The name of the input field in a radio\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the radio button.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string\n  /**\n   * If `true`, the radio will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   *\n   * @default false\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   *\n   * @default false\n   */\n  defaultChecked?: boolean\n  /**\n   * If `true`, the radio will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is true, the radio will remain\n   * focusable but not interactive.\n   *\n   * @default false\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the radio will be read-only\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This also sets `aria-invalid` to `true`.\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the radio button will be required. This also sets `aria-required` to `true`.\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * Function called when checked state of the `input` changes\n   */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n  /**\n   * @internal\n   */\n  \"data-radiogroup\"?: any\n  /**\n   * Refers to the `id` of the element that labels the radio element.\n   */\n  \"aria-describedby\"?: string\n}\n\nexport interface RadioState {\n  isInvalid: boolean | undefined\n  isFocused: boolean\n  isChecked: boolean\n  isActive: boolean\n  isHovered: boolean\n  isDisabled: boolean | undefined\n  isReadOnly: boolean | undefined\n  isRequired: boolean | undefined\n}\n\n/**\n * `useRadio` is a custom hook used to provide radio functionality, as well as state and focus management to custom radio components when using it.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-radio\n */\nexport function useRadio(props: UseRadioProps = {}) {\n  const {\n    defaultChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled: isDisabledProp,\n    isReadOnly: isReadOnlyProp,\n    isRequired: isRequiredProp,\n    onChange,\n    isInvalid: isInvalidProp,\n    name,\n    value,\n    id: idProp,\n    \"data-radiogroup\": dataRadioGroup,\n    \"aria-describedby\": ariaDescribedBy,\n    ...htmlProps\n  } = props\n\n  const uuid = `radio-${useId()}`\n\n  const formControl = useFormControlContext()\n  const group = useRadioGroupContext()\n\n  const isWithinRadioGroup = !!group || !!dataRadioGroup\n  const isWithinFormControl = !!formControl\n\n  let id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid\n  id = idProp ?? id\n\n  const isDisabled = isDisabledProp ?? formControl?.isDisabled\n  const isReadOnly = isReadOnlyProp ?? formControl?.isReadOnly\n  const isRequired = isRequiredProp ?? formControl?.isRequired\n  const isInvalid = isInvalidProp ?? formControl?.isInvalid\n\n  const [isFocusVisible, setIsFocusVisible] = useState(false)\n  const [isFocused, setFocused] = useState(false)\n  const [isHovered, setHovering] = useState(false)\n  const [isActive, setActive] = useState(false)\n\n  const [isCheckedState, setChecked] = useState(Boolean(defaultChecked))\n\n  const isControlled = typeof isCheckedProp !== \"undefined\"\n  const isChecked = isControlled ? isCheckedProp : isCheckedState\n\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible)\n  }, [])\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        setChecked(event.target.checked)\n      }\n\n      onChange?.(event)\n    },\n    [isControlled, isDisabled, isReadOnly, onChange],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive(true)\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive(false)\n      }\n    },\n    [setActive],\n  )\n\n  const getRadioProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, () => setActive(true)),\n      onMouseUp: callAllHandlers(props.onMouseUp, () => setActive(false)),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, () =>\n        setHovering(true),\n      ),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, () =>\n        setHovering(false),\n      ),\n    }),\n    [\n      isActive,\n      isHovered,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      isFocused,\n      isReadOnly,\n      isFocusVisible,\n    ],\n  )\n\n  const { onFocus, onBlur } = formControl ?? {}\n\n  const getInputProps: PropGetter<InputDOMAttributes, InputDOMAttributes> =\n    useCallback(\n      (props = {}, ref = null) => {\n        const trulyDisabled = isDisabled && !isFocusable\n\n        return {\n          ...props,\n          id,\n          ref,\n          type: \"radio\",\n          name,\n          value,\n          onChange: callAllHandlers(props.onChange, handleChange),\n          onBlur: callAllHandlers(onBlur, props.onBlur, () =>\n            setFocused(false),\n          ),\n          onFocus: callAllHandlers(onFocus, props.onFocus, () =>\n            setFocused(true),\n          ),\n          onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n          onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n          checked: isChecked,\n          disabled: trulyDisabled,\n          readOnly: isReadOnly,\n          required: isRequired,\n          \"aria-invalid\": ariaAttr(isInvalid),\n          \"aria-disabled\": ariaAttr(trulyDisabled),\n          \"aria-required\": ariaAttr(isRequired),\n          \"data-readonly\": dataAttr(isReadOnly),\n          \"aria-describedby\": ariaDescribedBy,\n          style: visuallyHiddenStyle,\n        }\n      },\n      [\n        isDisabled,\n        isFocusable,\n        id,\n        name,\n        value,\n        handleChange,\n        onBlur,\n        onFocus,\n        onKeyDown,\n        onKeyUp,\n        isChecked,\n        isReadOnly,\n        isRequired,\n        isInvalid,\n        ariaDescribedBy,\n      ],\n    )\n\n  const getLabelProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    ref,\n    onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  const getRootProps: PropGetter = (props, ref = null) => ({\n    ...props,\n    ref,\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  const state: RadioState = {\n    isInvalid,\n    isFocused,\n    isChecked,\n    isActive,\n    isHovered,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n  }\n\n  return {\n    state,\n    /**\n     * @deprecated - use `getRadioProps` instead\n     */\n    getCheckboxProps: getRadioProps,\n    getRadioProps,\n    getInputProps,\n    getLabelProps,\n    getRootProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the radio label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseRadioReturn = ReturnType<typeof useRadio>\n","/**\n * Styles to visually hide an element\n * but make it accessible to screen-readers\n */\nexport const visuallyHiddenStyle: React.CSSProperties = {\n  border: \"0\",\n  clip: \"rect(0, 0, 0, 0)\",\n  height: \"1px\",\n  width: \"1px\",\n  margin: \"-1px\",\n  padding: \"0\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\",\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}